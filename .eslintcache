[{"C:\\psychology\\src\\index.js":"1","C:\\psychology\\src\\App.js":"2","C:\\psychology\\src\\reducers\\index.js":"3","C:\\psychology\\src\\reducers\\login.js":"4","C:\\psychology\\src\\reducers\\admin.js":"5","C:\\psychology\\src\\actions\\ActionTypes.js":"6","C:\\psychology\\src\\root.js":"7","C:\\psychology\\src\\components\\main.js":"8","C:\\psychology\\src\\components\\login.js":"9","C:\\psychology\\src\\components\\header.js":"10","C:\\psychology\\src\\components\\public_room_list.js":"11","C:\\psychology\\src\\components\\generate_room.js":"12","C:\\psychology\\src\\actions\\index.js":"13","C:\\psychology\\src\\components\\game_ready.js":"14","C:\\psychology\\src\\components\\public_room.js":"15","C:\\psychology\\src\\components\\game_container.js":"16","C:\\psychology\\src\\components\\moving_dots\\moving_dots.js":"17","C:\\psychology\\src\\reducers\\game.js":"18","C:\\psychology\\src\\components\\common\\timer.js":"19","C:\\psychology\\src\\components\\treasure_ship\\treasure_ship.js":"20","C:\\psychology\\src\\components\\treasure_ship\\ship_wreck.js":"21","C:\\psychology\\src\\components\\hero\\hero.js":"22","C:\\psychology\\src\\socket.js":"23","C:\\psychology\\src\\components\\hero\\fame.js":"24","C:\\psychology\\src\\components\\hero\\no_more_hero.js":"25","C:\\psychology\\src\\components\\prisoner\\prisoner.js":"26","C:\\psychology\\src\\components\\war_and_peace\\war_and_peace.js":"27","C:\\psychology\\src\\components\\war_and_peace\\player.js":"28","C:\\psychology\\src\\components\\register.js":"29","C:\\psychology\\src\\components\\ranking.js":"30","C:\\psychology\\src\\components\\game_result.js":"31","C:\\psychology\\src\\function\\level.js":"32","C:\\psychology\\src\\components\\reverse_auction\\reverse_auction.js":"33","C:\\psychology\\src\\components\\reverse_auction\\player.js":"34","C:\\psychology\\src\\components\\reverse_auction\\item.js":"35","C:\\psychology\\src\\components\\reverse_auction\\price_timer.js":"36","C:\\psychology\\src\\components\\account_check.js":"37","C:\\psychology\\src\\components\\private_room.js":"38","C:\\psychology\\src\\components\\fast_start.js":"39","C:\\psychology\\src\\components\\account.js":"40","C:\\psychology\\src\\components\\game_intro.js":"41"},{"size":471,"mtime":1610882389621,"results":"42","hashOfConfig":"43"},{"size":5842,"mtime":1614796739643,"results":"44","hashOfConfig":"43"},{"size":248,"mtime":1611508772868,"results":"45","hashOfConfig":"43"},{"size":781,"mtime":1614688986666,"results":"46","hashOfConfig":"43"},{"size":599,"mtime":1610882213126,"results":"47","hashOfConfig":"43"},{"size":354,"mtime":1614580768202,"results":"48","hashOfConfig":"43"},{"size":313,"mtime":1614532192213,"results":"49","hashOfConfig":"43"},{"size":4424,"mtime":1614794877301,"results":"50","hashOfConfig":"43"},{"size":1944,"mtime":1614670434698,"results":"51","hashOfConfig":"43"},{"size":2644,"mtime":1614673181056,"results":"52","hashOfConfig":"43"},{"size":3252,"mtime":1614668740885,"results":"53","hashOfConfig":"43"},{"size":5044,"mtime":1614625449082,"results":"54","hashOfConfig":"43"},{"size":1019,"mtime":1614580810032,"results":"55","hashOfConfig":"43"},{"size":8661,"mtime":1614787308259,"results":"56","hashOfConfig":"43"},{"size":1241,"mtime":1614627973572,"results":"57","hashOfConfig":"43"},{"size":2539,"mtime":1614065886223,"results":"58","hashOfConfig":"43"},{"size":8846,"mtime":1613742935350,"results":"59","hashOfConfig":"43"},{"size":710,"mtime":1611925965195,"results":"60","hashOfConfig":"43"},{"size":2147,"mtime":1614152564818,"results":"61","hashOfConfig":"43"},{"size":11715,"mtime":1613718366105,"results":"62","hashOfConfig":"43"},{"size":3233,"mtime":1611902683078,"results":"63","hashOfConfig":"43"},{"size":6414,"mtime":1613718428184,"results":"64","hashOfConfig":"43"},{"size":108,"mtime":1612031247902,"results":"65","hashOfConfig":"43"},{"size":390,"mtime":1612077501742,"results":"66","hashOfConfig":"43"},{"size":343,"mtime":1612079855162,"results":"67","hashOfConfig":"43"},{"size":12197,"mtime":1613718350941,"results":"68","hashOfConfig":"43"},{"size":14703,"mtime":1613718388366,"results":"69","hashOfConfig":"43"},{"size":1671,"mtime":1613125256290,"results":"70","hashOfConfig":"43"},{"size":5239,"mtime":1614796778197,"results":"71","hashOfConfig":"43"},{"size":5186,"mtime":1613549511148,"results":"72","hashOfConfig":"43"},{"size":1492,"mtime":1613717595812,"results":"73","hashOfConfig":"43"},{"size":90,"mtime":1613647701589,"results":"74","hashOfConfig":"43"},{"size":8910,"mtime":1614692512867,"results":"75","hashOfConfig":"43"},{"size":1061,"mtime":1614437791410,"results":"76","hashOfConfig":"43"},{"size":2001,"mtime":1614330792718,"results":"77","hashOfConfig":"43"},{"size":3436,"mtime":1614437476939,"results":"78","hashOfConfig":"43"},{"size":2895,"mtime":1614673887526,"results":"79","hashOfConfig":"43"},{"size":2146,"mtime":1614614067900,"results":"80","hashOfConfig":"43"},{"size":2269,"mtime":1614796017958,"results":"81","hashOfConfig":"43"},{"size":3364,"mtime":1614689964041,"results":"82","hashOfConfig":"43"},{"size":1842,"mtime":1614796519215,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"8u2c1",{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"86"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"86"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"86"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\psychology\\src\\index.js",[],["190","191"],"C:\\psychology\\src\\App.js",["192","193","194","195"],"C:\\psychology\\src\\reducers\\index.js",[],"C:\\psychology\\src\\reducers\\login.js",[],"C:\\psychology\\src\\reducers\\admin.js",[],"C:\\psychology\\src\\actions\\ActionTypes.js",[],"C:\\psychology\\src\\root.js",[],"C:\\psychology\\src\\components\\main.js",["196","197","198","199","200","201","202","203","204","205"],"C:\\psychology\\src\\components\\login.js",["206"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/login.css';\r\n\r\nclass Login extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value\r\n    })\r\n  }\r\n  onClick1 = ()=>{\r\n    const post = {   //전송하려는 post obj\r\n      email:this.state.email,\r\n      password :this.state.password,\r\n    }\r\n    fetch('/auth/login',{\r\n      method :\"POST\",\r\n      headers:{\r\n        'content-type':'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body:JSON.stringify(post)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n    })\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      if(data.is_logined){\r\n        this.props.handleSuccess(data.user);\r\n        if(this.props.toPrev) window.location.reload();\r\n        else this.props.history.push('/');\r\n      }\r\n      else{\r\n        alert('잘못된 Email 또는 비밀번호 입니다.');\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='login'>\r\n        <input type=\"email\" name=\"email\" onChange={this.onChange} required placeholder=\"Email\"/>\r\n        <input type=\"password\" name=\"password\" onChange={this.onChange} required placeholder=\"Password\"/>\r\n        <button onClick={this.onClick1}>로그인</button>\r\n        <Link to=\"/register\">계정 생성</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\psychology\\src\\components\\header.js",["207","208","209"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport calLevel from '../function/level';\r\nimport './css/header.css';\r\n\r\nclass Header extends Component{\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired\r\n  };\r\n  constructor(props){\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n      //\r\n    }\r\n  }\r\n  onClick = ()=>{\r\n    document.cookie = \"token=\";\r\n    fetch('/auth/logout',{\r\n      credentials : 'include'\r\n    })\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      window.location.reload();\r\n    });\r\n  }\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    // pc version\r\n    if(!mobile) return(\r\n      <div className='header'>\r\n        <Link to=\"/\">심리게임 실험 플랫폼</Link>\r\n        <div>\r\n          <Link to=\"/ranking\"><i className=\"fas fa-trophy\"></i> 랭킹</Link>\r\n          {this.props.is_guest ?\r\n            <div>\r\n              <span>{this.props.user_info.nickname} &nbsp;&nbsp;&nbsp;</span>\r\n              <Link to=\"/account_check/main\"><i className=\"fas fa-sign-in-alt\"></i> Login</Link>\r\n            </div>\r\n            :\r\n            (this.props.is_logined ?\r\n              (\r\n                <div>\r\n                  <span>{this.props.user_info.nickname} &nbsp;&nbsp;&nbsp;</span>\r\n                  <button onClick={this.onClick}><i className=\"fas fa-sign-out-alt\"></i> Logout</button>\r\n                </div>\r\n              )\r\n              :\r\n              (\r\n                <div>\r\n                  <span>{this.props.user_info.nickname} &nbsp;&nbsp;&nbsp;</span>\r\n                  <Link to=\"/login\"><i className=\"fas fa-sign-in-alt\"></i> Login</Link>\r\n                </div>\r\n              )\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n    // mobile version\r\n    else return(\r\n      <div className=\"mobile_header\">\r\n        <Link to=\"/\">심리게임 실험 플랫폼</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_guest : state.login.is_guest,\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n    setGuestMode : (info)=>{dispatch(actions.guest_mode(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withCookies(Header));\r\n","C:\\psychology\\src\\components\\public_room_list.js",["210","211","212","213","214"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/public_room_list.css';\r\nimport Generate_room from './generate_room';\r\nimport Public_room from './public_room';\r\n\r\nclass Public_room_list extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      room_list : [],\r\n      name : '전체',\r\n    }\r\n  }\r\n  componentDidMount = ()=>{\r\n    fetch('/room')\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n        this.setState({\r\n          room_list : data,\r\n        });\r\n        console.log(data);\r\n    });\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onClick2 = roomID => {\r\n    this.props.history.push(`/game_ready/${roomID}`);\r\n  }\r\n  onClick4 = e =>{\r\n    this.setState({\r\n      name : e.target.name,\r\n    })\r\n  }\r\n  render(){\r\n    const {room_list} = this.state;\r\n    var list = [];\r\n    for (var i=0;i<room_list.length;i++){\r\n      if(this.state.name===\"전체\" || this.state.name===room_list[i].gameName){\r\n        if(room_list[i].userList.length<room_list[i].maxNumber && room_list[i].userList.length>0){\r\n          var data = room_list[i];\r\n          list.push(<Public_room data={data} onClick={()=>{this.onClick2(data.roomID)}}/>);\r\n        }\r\n      }\r\n    }\r\n    const mobile = window.innerWidth<768;\r\n    if(!mobile) return(\r\n      <div className = 'public_room_list'>\r\n        <div className=\"game_select\">\r\n          <button className={this.state.name===\"전체\" ? \"select\" : \"\"}\r\n            name=\"전체\" onClick={this.onClick4}>전체</button>\r\n          <button className={this.state.name===\"죄수의 딜레마\" ? \"select\" : \"\"}\r\n            name=\"죄수의 딜레마\" onClick={this.onClick4}>죄수의 딜레마</button>\r\n          <button className={this.state.name===\"외로운 영웅\" ? \"select\" : \"\"}\r\n            name=\"외로운 영웅\" onClick={this.onClick4}>외로운 영웅</button>\r\n          <button className={this.state.name===\"보물선\" ? \"select\" : \"\"}\r\n            name=\"보물선\" onClick={this.onClick4}>보물선</button>\r\n          <button className={this.state.name===\"전쟁과 평화\" ? \"select\" : \"\"}\r\n            name=\"전쟁과 평화\" onClick={this.onClick4}>전쟁과 평화</button>\r\n          <button className={this.state.name===\"거꾸로 경매\" ? \"select\" : \"\"}\r\n            name=\"거꾸로 경매\" onClick={this.onClick4}>거꾸로 경매</button>\r\n        </div>\r\n        <div className=\"room_list\">\r\n          {list}\r\n        </div>\r\n      </div>\r\n    );\r\n    else return(\r\n      <div className = 'public_room_list'>\r\n        <label>공개방 참여</label>\r\n        <select name=\"name\" onChange={this.onChange}>\r\n          <option value=\"전체\">전체</option>\r\n          <option value=\"죄수의 딜레마\">죄수의 딜레마</option>\r\n          <option value=\"외로운 영웅\">외로운 영웅</option>\r\n          <option value=\"보물선\">보물선</option>\r\n          <option value=\"전쟁과 평화\">전쟁과 평화</option>\r\n          <option value=\"거꾸로 경매\">거꾸로 경매</option>\r\n        </select>\r\n        <div className=\"room_list\">\r\n          {list}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Public_room_list;\r\n","C:\\psychology\\src\\components\\generate_room.js",["215","216"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport './css/generate_room.css';\r\nimport socket from '../socket.js';\r\nconst crypto = require(\"crypto\");\r\n\r\nclass Generate_room extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isPublic : true,\r\n      name : \"죄수의 딜레마\",\r\n      max_number : 3,\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onClick1 = ()=>{\r\n    socket.emit('generate room', null);\r\n    var roomID = crypto.randomBytes(10).toString('hex');\r\n    const room = {\r\n      roomID : roomID,\r\n      isPublic : this.state.isPublic,\r\n      gameName : this.state.name,\r\n      maxNumber : (this.state.name==='죄수의 딜레마' ? 2 : this.state.max_number),\r\n      roomOwner : this.props.user_info.nickname,\r\n      userList : [{userID : this.props.user_info.nickname}],\r\n    }\r\n    fetch('/room', {\r\n        method :\"POST\",\r\n        headers:{\r\n          'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(room)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n      })\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        console.log(data);\r\n      });\r\n    this.props.history.push(`/game_ready/${roomID}`);\r\n  }\r\n  // 1 증가\r\n  onClick2 = ()=>{\r\n    if(this.state.name!=='죄수의 딜레마' && this.state.max_number!==20){\r\n      this.setState({\r\n        max_number : this.state.max_number+1,\r\n      });\r\n    }\r\n  }\r\n  // 1 감소\r\n  onClick3 = ()=>{\r\n    if(this.state.name!=='죄수의 딜레마' && this.state.max_number!==3){\r\n      this.setState({\r\n        max_number : this.state.max_number-1,\r\n      })\r\n    }\r\n  }\r\n  onClick4 = e=>{\r\n    this.setState({\r\n      name : e.target.name,\r\n    });\r\n  }\r\n  onClick5 = value =>{\r\n    this.setState({\r\n      isPublic : value,\r\n    });\r\n  }\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    if(!mobile) return(\r\n      <div className='generate_room'>\r\n        <div className=\"game_select\">\r\n          <button className={this.state.name===\"죄수의 딜레마\" ? \"select\" : \"\"}\r\n            name=\"죄수의 딜레마\" onClick={this.onClick4}>죄수의 딜레마</button>\r\n          <button className={this.state.name===\"외로운 영웅\" ? \"select\" : \"\"}\r\n            name=\"외로운 영웅\" onClick={this.onClick4}>외로운 영웅</button>\r\n          <button className={this.state.name===\"보물선\" ? \"select\" : \"\"}\r\n            name=\"보물선\" onClick={this.onClick4}>보물선</button>\r\n          <button className={this.state.name===\"전쟁과 평화\" ? \"select\" : \"\"}\r\n            name=\"전쟁과 평화\" onClick={this.onClick4}>전쟁과 평화</button>\r\n          <button className={this.state.name===\"거꾸로 경매\" ? \"select\" : \"\"}\r\n            name=\"거꾸로 경매\" onClick={this.onClick4}>거꾸로 경매</button>\r\n        </div>\r\n        <div className=\"max_select\">\r\n          <button className=\"circle\" onClick={this.onClick3}>-</button>\r\n          <button>{this.state.name==='죄수의 딜레마' ? \"2인\" : this.state.max_number+'인'}</button>\r\n          <button className=\"circle\" onClick={this.onClick2}>+</button>\r\n          <button className={this.state.isPublic ? \"select\" : \"\"} onClick={()=>this.onClick5(true)}>공개</button>\r\n          <button className={this.state.isPublic ? \"\" : \"select\"} onClick={()=>this.onClick5(false)}>비공개</button>\r\n          <button onClick={this.onClick1}>방 생성</button>\r\n        </div>\r\n      </div>\r\n    )\r\n    else return(\r\n      <div className='generate_room'>\r\n        <label>방 만들기</label>\r\n        <span>원하는 방을 만드세요.</span>\r\n        <select name=\"name\" onChange={this.onChange}>\r\n          <option value=\"죄수의 딜레마\">죄수의 딜레마</option>\r\n          <option value=\"외로운 영웅\">외로운 영웅</option>\r\n          <option value=\"보물선\">보물선</option>\r\n          <option value=\"전쟁과 평화\">전쟁과 평화</option>\r\n          <option value=\"거꾸로 경매\">거꾸로 경매</option>\r\n        </select>\r\n        <div className=\"wrap1\">\r\n          <button className=\"circle\" onClick={this.onClick3}>-</button>\r\n          <button>{this.state.name==='죄수의 딜레마' ? \"2인\" : this.state.max_number+'인'}</button>\r\n          <button className=\"circle\" onClick={this.onClick2}>+</button>\r\n        </div>\r\n        <div className=\"wrap2\">\r\n          <button className={this.state.isPublic ? \"select\" : \"\"} onClick={()=>this.onClick5(true)}>공개</button>\r\n          <button className={this.state.isPublic ? \"\" : \"select\"} onClick={()=>this.onClick5(false)}>비공개</button>\r\n        </div>\r\n        <button onClick={this.onClick1}>방 생성</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Generate_room);\r\n","C:\\psychology\\src\\actions\\index.js",[],"C:\\psychology\\src\\components\\game_ready.js",["217","218","219","220","221"],"C:\\psychology\\src\\components\\public_room.js",["222","223","224","225"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/public_room.css';\r\n\r\nclass Public_room extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {data, onClick} = this.props;\r\n    const mobile = window.innerWidth<768;\r\n    if(!mobile) return(\r\n      <div className=\"public_room\">\r\n        <div>\r\n          <img src=\"./assets/2.jpg\"/>\r\n          <div>\r\n            <span className=\"name\">{data.gameName}</span>\r\n            <span className=\"number\">{data.userList.length}/{data.maxNumber}명</span>\r\n            <br/>\r\n            <span>그 외 세부정보</span>\r\n          </div>\r\n        </div>\r\n        <button onClick={onClick}>참가</button>\r\n      </div>\r\n    );\r\n    else return(\r\n      <div className=\"public_room\" onClick={onClick}>\r\n        <div>\r\n          <img src=\"./assets/2.jpg\"/>\r\n          <div>\r\n            <span className=\"name\">{data.gameName}</span>\r\n            <span className=\"number\">{data.userList.length}/{data.maxNumber}명</span>\r\n            <br/>\r\n            <span>그 외 세부정보</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Public_room;\r\n","C:\\psychology\\src\\components\\game_container.js",["226","227","228"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/game_container.css';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport socket from '../socket.js';\r\nconst crypto = require(\"crypto\");\r\n\r\nclass Game_container extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onClick = e=>{\r\n    // if it is solo player game\r\n    if(!this.props.multiple){\r\n      this.props.gameStart(this.props.name);\r\n      this.props.history.push(this.props.link+'/solo');\r\n    }\r\n    // else if it is multiplayer game\r\n    else {\r\n      fetch(`/room/max/${this.props.name}`)\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        // if room doesn't exist, generate new room\r\n        if(!data){\r\n          socket.emit('generate room', null);\r\n          var roomID = crypto.randomBytes(10).toString('hex');\r\n          const room = {\r\n            roomID : roomID,\r\n            isPublic : true,\r\n            gameName : this.props.name,\r\n            maxNumber : 5,   // default : 5\r\n            roomOwner : this.props.user_info.nickname,\r\n            userList : [{userID : this.props.user_info.nickname}],\r\n          }\r\n          fetch('/room', {\r\n              method :\"POST\",\r\n              headers:{\r\n                'content-type':'application/json'\r\n              },\r\n              body:JSON.stringify(room)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n            })\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n              console.log(data);\r\n            });\r\n          this.props.history.push(`/game_ready/${roomID}`);\r\n        }\r\n        // if room exist\r\n        else{\r\n          this.props.history.push(`/game_ready/${data.roomID}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='game_container'>\r\n        <img src=\"./assets/2.jpg\"/>\r\n        <div className=\"status\">{this.props.name}</div>\r\n        <div>\r\n          <button onClick={this.onClick}>빠른 시작</button>\r\n          <button>게임 방법</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameStart : (name)=>{dispatch(actions.game_started(name, null, null))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game_container);\r\n","C:\\psychology\\src\\components\\moving_dots\\moving_dots.js",["229","230","231","232","233","234","235","236","237","238","239","240","241"],"import React, {createRef, useEffect, useState, Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport Timer from '../common/timer';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport '../css/moving_dots.css';\r\nconst request = require('request');\r\n\r\nfunction Moving_dots(props){\r\n  let canvas;\r\n  let canvasRef = createRef();\r\n  const height = 950;\r\n  const width = 1800;\r\n  let pos = {\r\n    drawable : false,\r\n    X : Math.random()*width,\r\n    Y : Math.random()*height,\r\n  };\r\n  let origin = {\r\n    X : Math.random()*width,\r\n    Y : Math.random()*height,\r\n  };\r\n  let ctx;\r\n\r\n  //------------game status---------------------//\r\n  // game state : ready, timerRun, updateDots, showCluster, gameResult\r\n  let gameState = \"ready\";\r\n  // decide whether dots should be shown\r\n  let showDots = false;\r\n  // which round it is : 0~8\r\n  let round = 0;\r\n  // distance which dots will move\r\n  let length = [100, 120, 140, 200, 250, 200, 140, 120, 100];\r\n  // whether timer should run\r\n  const [timer, setTimer] = useState(false);\r\n  // define works after 10 sec\r\n  let timer1;\r\n  // define background messages\r\n  let backgroundMsg;\r\n  // set other dots' positions {X : .., Y : ..}\r\n  let positions = [];\r\n  // contains information of position\r\n  let position_data;\r\n\r\n  useEffect(async ()=>{\r\n    // use full screen\r\n    window.document.documentElement.requestFullscreen();\r\n    //---------initialize----------------------------//\r\n    // canvas initialize\r\n    canvas = canvasRef.current;\r\n    ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"#384050\";\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n    // draw background text\r\n    backgroundMsg = \"Ready\";\r\n    setBackgroundMsg(backgroundMsg);\r\n    // draw positions of other Moving_dots\r\n    await setPositions();\r\n    //---------initialize done----------------------------//\r\n    // countDown\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"3\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 1000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"2\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 2000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"1\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 3000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"Round 1\";\r\n      setBackgroundMsg(backgroundMsg);\r\n      drawDots();\r\n      showDots = true;\r\n      setTimer(true);\r\n      gameState = \"timerRun\";\r\n    }, 4000);\r\n    timer1 = setTimeout(()=>{\r\n      var e = {offsetX : Math.random()*width, offsetY : Math.random()*height};\r\n      initDraw(e);\r\n    }, 14000);\r\n    // evenlistener\r\n    canvas.addEventListener(\"mousedown\", initDraw);\r\n    canvas.addEventListener(\"mousemove\", draw);\r\n  }, []);\r\n\r\n  function setBackgroundMsg(msg){\r\n    // draw background text\r\n    ctx.beginPath();\r\n    ctx.textAlign = \"center\";\r\n    ctx.font = \"150px Arial\";\r\n    ctx.fillStyle = \"rgba(112, 112, 112, 1)\";\r\n    ctx.fillText(msg, width/2, height/2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  function initDraw(e){\r\n    if(gameState===\"timerRun\"){\r\n      // game is end\r\n      if(round===8){\r\n        // set new origin\r\n        pos = {...pos, ...getPosition(e)};\r\n        const d_x = pos.X-origin.X;\r\n        const d_y = pos.Y-origin.Y;\r\n        const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n        const len_x = length[round]*d_x/_r;\r\n        const len_y = length[round]*d_y/_r;\r\n        var end_x = len_x+origin.X;\r\n        var end_y = len_y+origin.Y;\r\n        if(end_x<0) end_x = width+end_x;\r\n        if(end_x>width) end_x = end_x-width;\r\n        if(end_y<0) end_y = height+end_y;\r\n        if(end_y>height) end_y = end_y-height;\r\n        origin = {X : end_x, Y : end_y};\r\n        //--------------------- game status update ----------------------//\r\n        gameState = \"gameResult\";\r\n        // timer stop\r\n        setTimer(false);\r\n        // canvas update\r\n        updatePositions();\r\n        backgroundMsg = \"Game End\";\r\n        draw(e);\r\n        // get game results\r\n        getResults();\r\n      }\r\n      // round is not yet 9\r\n      else{\r\n        // set new origin\r\n        pos = {...pos, ...getPosition(e)};\r\n        const d_x = pos.X-origin.X;\r\n        const d_y = pos.Y-origin.Y;\r\n        const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n        const len_x = length[round]*d_x/_r;\r\n        const len_y = length[round]*d_y/_r;\r\n        var end_x = len_x+origin.X;\r\n        var end_y = len_y+origin.Y;\r\n        if(end_x<0) end_x = width+end_x;\r\n        if(end_x>width) end_x = end_x-width;\r\n        if(end_y<0) end_y = height+end_y;\r\n        if(end_y>height) end_y = end_y-height;\r\n        origin = {X : end_x, Y : end_y};\r\n        //--------------------- game status update ----------------------//\r\n        gameState = \"updateDots\";\r\n        // timer stop\r\n        setTimer(false);\r\n        // round ++\r\n        round++;\r\n        // canvas update\r\n        backgroundMsg = \"moving dots\";\r\n        draw(e);\r\n\r\n        // after 1sec, update dots position and canvas\r\n        setTimeout(()=>{\r\n          updatePositions();\r\n          draw(e);\r\n\r\n        }, 1000);\r\n\r\n        // after 2 sec, new round start\r\n        setTimeout(()=>{\r\n          gameState= \"timerRun\";\r\n          backgroundMsg = \"Round \"+(round+1);\r\n          draw(e);\r\n          setTimer(true);\r\n        }, 2000);\r\n\r\n        // after 10sec initDraw\r\n        clearInterval(timer1);\r\n        timer1 = setTimeout(()=>{\r\n          var e = {offsetX : Math.random()*width, offsetY : Math.random()*height};\r\n          initDraw(e);\r\n        }, 12000);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function setPositions(){\r\n    fetch('/movingdot')\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      position_data = data;\r\n      positions = position_data.coord_record[0];\r\n      length = position_data.movers;\r\n    });\r\n  }\r\n\r\n  function updatePositions(){\r\n    positions = position_data.coord_record[round+1];\r\n  }\r\n\r\n  function getResults(){\r\n    positions.push([pos.X, pos.Y]);\r\n    const post = {\r\n      coord_data : positions,\r\n      k : 3,\r\n    }\r\n    fetch('/movingdot/result', {\r\n        method :\"POST\",\r\n        headers:{\r\n          'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(post)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n    })\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      console.log(data);\r\n    });\r\n  }\r\n\r\n  function drawDots(){\r\n    for(var i=0;i<position_data.points_num;i++){\r\n      ctx.beginPath();\r\n      ctx.arc(positions[i][0], positions[i][1], 10, 0, 2*Math.PI, true);\r\n      ctx.fillStyle=\"#FFCF24\";\r\n      ctx.fill();\r\n    }\r\n  }\r\n\r\n  function draw(e){\r\n    // claer canvas\r\n    clearCanvas();\r\n    // draw background text\r\n    setBackgroundMsg(backgroundMsg);\r\n    // draw other dots\r\n    if(showDots) drawDots();\r\n    // draw mydot\r\n    ctx.beginPath();\r\n    ctx.arc(origin.X, origin.Y, 10, 0, 2*Math.PI, true);\r\n    ctx.fillStyle=\"#56AEFF\";\r\n    ctx.fill();\r\n    // draw support line\r\n    drawSupportLine(origin, getPosition(e));\r\n  }\r\n\r\n  function getPosition(e){\r\n    return {X: e.offsetX, Y: e.offsetY};\r\n  }\r\n\r\n  function clearCanvas(){\r\n    // canvas reset\r\n    ctx.clearRect(0,0,canvas.width, canvas.height);\r\n    ctx.fillStyle = \"#384050\";\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n  }\r\n\r\n  function drawSupportLine(_origin, _pos){\r\n    // draw line to origin to pos\r\n    //ctx.beginPath();\r\n    //ctx.moveTo(_origin.X, _origin.Y);\r\n    const d_x = _pos.X-_origin.X;\r\n    const d_y = _pos.Y-_origin.Y;\r\n    const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n    const len_x = length[round]*d_x/_r;\r\n    const len_y = length[round]*d_y/_r;\r\n    var end_x = len_x+_origin.X;\r\n    var end_y = len_y+_origin.Y;\r\n    if(end_x<0) end_x = width+end_x;\r\n    if(end_x>width) end_x = end_x-width;\r\n    if(end_y<0) end_y = height+end_y;\r\n    if(end_y>height) end_y = end_y-height;\r\n    //ctx.lineTo(end_x, end_y);\r\n    //ctx.stroke();\r\n    // draw circle at pos\r\n    ctx.beginPath();\r\n    ctx.arc(end_x, end_y, 10, 0, 2*Math.PI, true);\r\n    ctx.fillStyle=\"rgba(86, 174, 255, 0.5)\";\r\n    ctx.fill();\r\n  }\r\n\r\n  function onClick1(){\r\n    props.gameEnd();\r\n    props.history.push('/');\r\n  }\r\n\r\n  return(\r\n    <div className=\"moving_dots\">\r\n      <Timer gameEnd={()=>{}} start={timer} time={10000} width={width} height={20} color=\"#FFCF24\"/>\r\n      <canvas ref={canvasRef} width={width} height={height}/>\r\n      <button onClick={onClick1}>게임 포기</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Moving_dots);\r\n","C:\\psychology\\src\\reducers\\game.js",[],"C:\\psychology\\src\\components\\common\\timer.js",["242","243","244","245"],"import React, {createRef, useEffect, Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nclass Timer extends Component{\r\n  constructor(props) {\r\n      super(props);\r\n      this.canvasRef = React.createRef();\r\n      this.timer = 0;\r\n      this.state = {\r\n        count : 0,\r\n      };\r\n    }\r\n  componentDidMount = ()=>{\r\n    var canvas = this.canvasRef.current;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = this.props.color;\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n    if(this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n    }\r\n  }\r\n  componentWillReceiveProps = (nextProps)=>{\r\n    if(nextProps.start && !this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n      this.setState({count : 0});\r\n    }\r\n  }\r\n  componentWillUnmount = ()=>{\r\n    clearInterval(this.timer);\r\n  }\r\n  draw = ()=>{\r\n    var canvas = this.canvasRef.current;\r\n    if(canvas){\r\n      var ctx = canvas.getContext('2d');\r\n\r\n      // count time\r\n      this.setState({\r\n        count : this.state.count+1,\r\n      });\r\n\r\n      // check timer is done\r\n      var ratio = this.state.count*10/this.props.time;\r\n      if(ratio>=1) {\r\n        clearInterval(this.timer);\r\n        this.setState({count : 0});\r\n        ctx.fillStyle = this.props.color;\r\n        ctx.fillRect(0,0,canvas.width, canvas.height);\r\n        this.props.gameEnd();\r\n      }\r\n\r\n      // time bar update\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.fillStyle = this.props.color;\r\n      ctx.fillRect(0,0,canvas.width*(1-ratio), canvas.height);\r\n\r\n      // check it's stopped\r\n      if(!this.props.start){\r\n        clearInterval(this.timer);\r\n        this.setState({count : 0});\r\n        ctx.fillStyle = this.props.color;\r\n        ctx.fillRect(0,0,canvas.width, canvas.height);\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <>\r\n        <canvas ref={this.canvasRef} width={this.props.width} height={this.props.height}/>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Timer;\r\n","C:\\psychology\\src\\components\\treasure_ship\\treasure_ship.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport '../css/treasure_ship.css';\r\nimport Game_result from '../game_result';\r\nimport socket from '../../socket.js';\r\nimport src1 from './assets/ship1.png';\r\nimport src2 from './assets/ship2.png';\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Treasure_ship extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      user_list : [],\r\n      on_board_user : [],\r\n      left_user : [],\r\n      choice : '',  // on_board / left\r\n      gold : [1000, 2000, 3000, 4000, 5000],\r\n      user_gold : new Map(),  // {{user1=>gold1}, {user2=>gold2}, ...}\r\n      on_board_gold : 0,\r\n      left_gold : 0,\r\n      ranking : 1, // 1 ~ user.length\r\n      result_mode : false,\r\n      result : new Map(),\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      //  initialize user gold by 0\r\n      var userGold = new Map();\r\n      for(var i=0;i<data.userList.length;i++){\r\n          userGold.set(data.userList[i].userID, 0);\r\n      }\r\n      //userGold = Array.from(userGold);\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        user_gold : userGold,\r\n      });\r\n    });\r\n  }\r\n  gameEnd = ()=>{\r\n    var result = new Map();\r\n    for(let [key, value] of this.state.user_gold){\r\n      result.set(key, Math.floor(value/10));\r\n    }\r\n    this.setState({\r\n      result : result,\r\n      result_mode : true,\r\n    });\r\n    socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n    socket.emit('game result', {\r\n      userID : this.props.user_info.nickname,\r\n      point : result.get(this.props.user_info.nickname),\r\n      exp : 1500,\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      this.setState({\r\n        step : 1,\r\n        timer : true,\r\n      });\r\n    });\r\n    // time end\r\n    socket.on('time end', (data)=>{\r\n      console.log('time end');\r\n      this.setState({\r\n        step : 2,\r\n        timer : false,\r\n      });\r\n      // send choie info to server\r\n      socket.emit('choice', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        choice : (this.state.choice ? this.state.choice : 'left')\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      // winner decision\r\n      var _winner = this.whoIsWinner(this.state.on_board_user.length, this.state.left_user.length);\r\n      // point reward decision\r\n      var user_gold = this.state.user_gold;\r\n      var _gold1, _gold2;\r\n      if(_winner==='on_board') {\r\n        _gold1 = this.state.gold[this.state.round-1]/(this.state.on_board_user.length);\r\n        _gold2 = 0;\r\n      } else {\r\n        _gold1 = this.state.gold[this.state.round-1]*(-0.05);\r\n        _gold2 = this.state.gold[this.state.round-1]*0.5/(this.state.left_user.length);\r\n      }\r\n      // give reward\r\n      for(var i=0;i<this.state.on_board_user.length;i++){\r\n        var _gold = user_gold.get(this.state.on_board_user[i]);\r\n        _gold += _gold1;\r\n        user_gold.set(this.state.on_board_user[i], _gold);\r\n      }\r\n      for(var i=0;i<this.state.left_user.length;i++){\r\n        var _gold = user_gold.get(this.state.left_user[i]);\r\n        _gold += _gold2;\r\n        user_gold.set(this.state.left_user[i], _gold);\r\n      }\r\n      user_gold = new Map([...user_gold.entries()].sort((a,b)=>b[1]-a[1]));\r\n      var cnt = 1;\r\n      user_gold.forEach((value, key)=>{\r\n        if(key===this.props.user_info.nickname) {\r\n          this.setState({ranking : cnt});\r\n        }\r\n        cnt++;\r\n      });\r\n      // change state\r\n      this.setState({\r\n        on_board_gold : _gold1,\r\n        left_gold : _gold2,\r\n        user_gold : user_gold,\r\n        step : 3,\r\n        winner : _winner,\r\n      });\r\n\r\n    });\r\n    // end round\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        on_board_user : [],\r\n        left_user : [],\r\n        choice : '',\r\n        winner : '',\r\n      });\r\n      // start new round\r\n      if(this.state.round!==6 &&\r\n        this.props.user_info.nickname===this.state.room_owner){\r\n        socket.emit('game start', {roomID : this.state.roomID, gameName : this.state.game_name});\r\n      }\r\n      else if(this.state.round===6) this.gameEnd();\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // get other user's choice\r\n    socket.on('choice', (data)=>{\r\n      if(data.choice==='on_board'){\r\n        var on_board = this.state.on_board_user;\r\n        on_board.push(data.userID);\r\n        this.setState({\r\n          on_board_user : on_board,\r\n        });\r\n      }\r\n      else {\r\n        var left = this.state.left_user;\r\n        left.push(data.userID);\r\n        this.setState({\r\n          left_user : left,\r\n        });\r\n      }\r\n    })\r\n  }\r\n  // n : on_board, m : left,\r\n  whoIsWinner = (n, m)=>{\r\n    switch(n+m){\r\n      case 3:\r\n        if(n<=1) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 4:\r\n        if(n<=2) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 5:\r\n        if(n<=2) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 6:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 7:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 8:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      default:\r\n        return 'on_board';\r\n        break;\r\n    }\r\n  }\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // choice\r\n  onClick2 = value=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        choice : value,\r\n      });\r\n    }\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){\r\n    const {chat_list, on_board_user, left_user, winner, user_gold} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // on_board list\r\n    var on_board = [];\r\n    for(var i=0;i<on_board_user.length;i++){\r\n      on_board.push(<span>{on_board_user[i]}</span>);\r\n    }\r\n    // left list\r\n    var left = [];\r\n    for(var i=0;i<left_user.length;i++){\r\n      left.push(<span>{left_user[i]}</span>);\r\n    }\r\n    // user gold leader board\r\n    var leader_board = [];\r\n    var cnt = 1;\r\n    user_gold.forEach((value, key)=>{\r\n      leader_board.push(<span>{cnt}. {key} - {value}G</span>);\r\n      cnt++;\r\n    });\r\n    if(!this.state.result_mode) return(\r\n      <div className='treasure_ship'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={20000} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>#{this.state.ranking}</span>\r\n            <span>{this.state.user_gold.get(this.props.user_info.nickname)}G</span>\r\n            <span>ROUND {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n\r\n            <div className=\"ship\">\r\n              <img src={src1}/>\r\n              <div>{this.state.gold[this.state.round-1]}G</div>\r\n              <button className={this.state.choice==='on_board' ? 'select' : ''} onClick={()=>{this.onClick2('on_board');}}>탑승</button>\r\n              <button className={this.state.choice==='left' ? 'select' : ''} onClick={()=>{this.onClick2('left');}}>잔류</button>\r\n            </div>\r\n\r\n            <div className=\"result\">\r\n              <div className={(winner ? (winner==='on_board' ? 'winner' : '') : '')}>\r\n                <label>탑승</label>\r\n                <br/>\r\n                {on_board}\r\n              </div>\r\n              <div className={(winner ? (winner==='left' ? 'winner' : '') : '')}>\r\n                <label>잔류</label>\r\n                <br/>\r\n                {left}\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"leader_board\">\r\n            {leader_board}\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n    else return(\r\n      <Game_result data = {this.state.result}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Treasure_ship);\r\n","C:\\psychology\\src\\components\\treasure_ship\\ship_wreck.js",["263","264"],"/* Babylon JS is available as **npm** package.\r\nYou can easily build a simple `React` Component around a `canvas` and Babylon JS\r\nI have created a minimal example with React+ Babylon:\r\n */\r\nimport React, { Component } from \"react\";\r\nimport * as BABYLON from '@babylonjs/core/Legacy/legacy';\r\nimport 'babylonjs-loaders';\r\n\r\nvar scene;\r\nvar car;\r\n/**\r\n * Example temnplate of using Babylon JS with React\r\n */\r\nclass Ship_wreck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { useWireFrame: false, shouldAnimate: false };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // start ENGINE\r\n    this.engine = new BABYLON.Engine(this.canvas, true, {doNotHandleContextLost: true});\r\n\r\n    this.engine.enableOfflineSupport = false;\r\n\r\n\r\n    BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () {\r\n      //alert('fuck');\r\n    }\r\n    //Create Scene\r\n    scene = new BABYLON.Scene(this.engine);\r\n\r\n    scene.clearCachedVertexData();\r\n\r\n    scene.cleanCachedTextureBuffer();\r\n\r\n    //--background settting---\r\n    this.setBackground();\r\n\r\n    //--Light---\r\n    this.addLight();\r\n\r\n    //--Camera---\r\n    this.addCamera();\r\n\r\n    //--Meshes---\r\n    this.addModels();\r\n\r\n    // Add Events\r\n    window.addEventListener(\"resize\", this.onWindowResize, false);\r\n\r\n    // Render Loop\r\n    this.engine.runRenderLoop(() => {\r\n      scene.render();\r\n    });\r\n\r\n    //Animation\r\n    scene.registerBeforeRender(() => {\r\n\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\r\n  }\r\n\r\n  onWindowResize = event => {\r\n    this.engine.resize();\r\n  };\r\n\r\n  setBackground = ()=>{\r\n    scene.clearColor = new BABYLON.Color3(34/256, 43/256, 61/256);\r\n  }\r\n\r\n  /**\r\n   * Add Lights\r\n   */\r\n  addLight = () => {\r\n    //---------- LIGHT---------------------\r\n    // Create a basic light, aiming 0,1,0 - meaning, to the sky.\r\n    var light = new BABYLON.HemisphericLight(\r\n      \"light1\",\r\n      new BABYLON.Vector3(0, 10, 0),\r\n      scene\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Add Camera\r\n   */\r\n  addCamera = () => {\r\n    // ---------------ArcRotateCamera or Orbit Control----------\r\n    var camera = new BABYLON.ArcRotateCamera(\r\n      \"Camera\",\r\n      Math.PI / 2,\r\n      Math.PI / 4,\r\n      4,\r\n      BABYLON.Vector3.Zero(),\r\n      scene\r\n    );\r\n    camera.inertia = 0;\r\n    camera.angularSensibilityX = 250;\r\n    camera.angularSensibilityY = 250;\r\n\r\n    // This attaches the camera to the canvas\r\n    camera.attachControl(this.canvas, true);\r\n    camera.setPosition(new BABYLON.Vector3(5, 5, 5));\r\n  };\r\n\r\n\r\n  /**\r\n   * Add Models\r\n   */\r\n  addModels = () => {\r\n    // Add BOX\r\n\r\n    car = BABYLON.SceneLoader.Append(\"./assets/OBJ/\", \"ship_light.obj\", scene, function(scene){\r\n      for(var i=0;i<scene.meshes.length;i++){\r\n        scene.meshes[i].scaling = scene.meshes[i].scaling.multiply(new BABYLON.Vector3(0.06, 0.06, 0.06));\r\n        scene.meshes[i].position.y += -1;\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <canvas className=\"ship_wreck\"\r\n        style={{ width: this.props.width, height: this.props.height }}\r\n        ref={canvas => {\r\n          this.canvas = canvas;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Ship_wreck;\r\n",["265","266"],"C:\\psychology\\src\\components\\hero\\hero.js",["267","268","269","270","271"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport '../css/hero.css';\r\nimport Timer from '../common/timer';\r\nimport Fame from './fame';\r\nimport No_more_hero from './no_more_hero';\r\nimport Game_result from '../game_result';\r\nimport socket from '../../socket.js';\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Hero extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      timer_run : true,\r\n      chat_list : [],\r\n      result_mode : false,\r\n      result : new Map(),\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n\r\n    // game behavior listen----------------------\r\n\r\n     socket.on('new message', (data)=>{\r\n       var _chatlist = this.state.chat_list;\r\n       _chatlist.push(data);\r\n       this.setState({\r\n         chat_list : _chatlist,\r\n       });\r\n       var target = document.getElementsByClassName('chatting')[0];\r\n       this.makeScrollTop();\r\n     });\r\n\r\n     // game end\r\n     socket.on('hero appear', (data)=>{\r\n       if(!this.state.hero){\r\n         this.setState({\r\n           hero : data.userID\r\n         });\r\n         // set result\r\n         var result = new Map();\r\n         for(var user of this.state.user_list){\r\n           if(data.userID !== user.userID) result.set(user.userID, 150);\r\n           else result.set(user.userID, 0);\r\n         }\r\n         this.setState({\r\n           result : result,\r\n         });\r\n         // exit room\r\n         socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n         socket.emit('game result', {\r\n           userID : this.props.user_info.nickname,\r\n           point : result.get(this.props.user_info.nickname),\r\n           exp : 200,\r\n         });\r\n       }\r\n     });\r\n  }\r\n\r\n  // after 10sec, game ends\r\n  gameEnd = ()=>{\r\n    this.setState({\r\n      timer_run : false,\r\n    });\r\n    // set result\r\n    var result = new Map();\r\n    for(var user of this.state.user_list){\r\n      result.set(user.userID, 50);\r\n    }\r\n    this.setState({\r\n      result : result,\r\n    });\r\n    // exit room\r\n    socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n    socket.emit('game result', {\r\n      userID : this.props.user_info.nickname,\r\n      point : result.get(this.props.user_info.nickname),\r\n      exp : 200,\r\n    });\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // hero appeared\r\n  onClick2 = e=>{\r\n    socket.emit('hero appear', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n  }\r\n  onClick3 = e=>{\r\n    this.setState({\r\n      result_mode : true,\r\n    });\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if(!this.state.result_mode) return(\r\n      <div className='hero'>\r\n        <div className=\"row1\">\r\n        {this.state.hero\r\n          ?\r\n            <>\r\n              <Fame hero={this.state.hero}/>\r\n              <button className=\"exit\" onClick={this.onClick3}>결과 확인</button>\r\n            </>\r\n          :\r\n          (this.state.timer_run\r\n           ?\r\n             <>\r\n               <Timer gameEnd={this.gameEnd} start={true} width={1000} time={10000} height={20} color=\"#56AEFF\"/>\r\n               <div className=\"hero_button\">\r\n                 <button onClick={this.onClick2}>영웅 출현</button>\r\n               </div>\r\n             </>\r\n           :\r\n            <>\r\n              <No_more_hero/>\r\n              <button className=\"exit\" onClick={this.onClick3}>결과 확인</button>\r\n            </>\r\n          )\r\n        }\r\n        </div>\r\n        <div className=\"row2\">\r\n          <div className=\"chatting\">\r\n            {chat}\r\n          </div>\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    else return(\r\n      <Game_result roomID={this.state.roomID} data={this.state.result}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hero);\r\n","C:\\psychology\\src\\socket.js",[],"C:\\psychology\\src\\components\\hero\\fame.js",[],"C:\\psychology\\src\\components\\hero\\no_more_hero.js",[],"C:\\psychology\\src\\components\\prisoner\\prisoner.js",["272","273","274","275","276","277","278"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport socket from '../../socket.js';\r\nimport Game_result from '../game_result';\r\nimport '../css/prisoner.css';\r\n\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Prisoner extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      user_list : [],\r\n      opponent_name : '',\r\n      my_sentence : 0,\r\n      opponent_sentence : 0,\r\n      my_choice : 'unknown', // confession, silence\r\n      opponent_choice : 'unknown',\r\n      my_emoji : 0,\r\n      opponent_emoji : 0, // 0~9\r\n      result_mode : false,\r\n      result : new Map(),\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      var opponent_name;\r\n      if(data.userList[0].userID===this.props.user_info.nickname){\r\n        opponent_name = data.userList[1].userID;\r\n      } else {\r\n        opponent_name = data.userList[0].userID;\r\n      }\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        opponent_name : opponent_name,\r\n      });\r\n    });\r\n  }\r\n  gameEnd = ()=>{\r\n    var result = new Map();\r\n    result.set(this.props.user_info.nickname, 1200-this.state.my_sentence*100);\r\n    result.set(this.state.opponent_name, 1200-this.state.opponent_sentence*100);\r\n    this.setState({\r\n      result : result,\r\n      result_mode : true,\r\n    });\r\n    socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n    socket.emit('game result', {\r\n      userID : this.props.user_info.nickname,\r\n      point : result.get(this.props.user_info.nickname),\r\n      exp : 1000,\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      this.setState({\r\n        step : 1,\r\n        timer : true,\r\n      })\r\n    });\r\n    // time end\r\n    socket.on('time end', (data)=>{\r\n      console.log('time end');\r\n      this.setState({\r\n        step : 2,\r\n        timer : false,\r\n      });\r\n      // send choice info to server\r\n      socket.emit('choice', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        choice : (this.state.my_choice === 'unknown') ? 'silence' : this.state.my_choice,\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      // sentence decision\r\n      var _my_sentence, _opponent_sentence;\r\n      var my_choice = this.state.my_choice === 'confession';\r\n      var opponent_choice = this.state.opponent_choice === 'confession';\r\n      if(my_choice && opponent_choice) {\r\n        _my_sentence = 3;\r\n        _opponent_sentence = 3;\r\n      } else if (my_choice && !opponent_choice){\r\n        _my_sentence = 0;\r\n        _opponent_sentence = 4;\r\n      } else if (!my_choice && opponent_choice){\r\n        _my_sentence = 4;\r\n        _opponent_sentence = 0;\r\n      } else {\r\n        _my_sentence = 1;\r\n        _opponent_sentence = 1;\r\n      }\r\n      // state update\r\n      this.setState({\r\n        step : 3,\r\n        my_sentence : this.state.my_sentence+_my_sentence,\r\n        opponent_sentence : this.state.opponent_sentence+_opponent_sentence,\r\n      });\r\n    });\r\n    // end round\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      // start new round\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        my_choice : 'unknown',\r\n        opponent_choice : 'unknown',\r\n      });\r\n      if(this.state.round!==6 && this.state.room_owner===this.props.user_info.nickname){\r\n        socket.emit('game start', {roomID : this.state.roomID, gameName : this.state.game_name});\r\n      }\r\n      else if(this.state.round===6){\r\n        this.gameEnd();\r\n        this.setState({\r\n          result_mode : true,\r\n        });\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // get other user's choice\r\n    socket.on('choice', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname) this.setState({opponent_choice : data.choice});\r\n      console.log(data.choice);\r\n    });\r\n    // get emoji change\r\n    socket.on('emoji change', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname) this.setState({opponent_emoji : data.emoji});\r\n    });\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // choice\r\n  onClick2 = value=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        choice : value,\r\n      });\r\n    }\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  onClick4 = (choice)=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        my_choice : choice,\r\n      });\r\n    }\r\n  }\r\n  onClick5 = emoji =>{\r\n    this.setState({\r\n      my_emoji : emoji\r\n    });\r\n    socket.emit('emoji change', {\r\n      roomID : this.state.roomID,\r\n      userID : this.props.user_info.nickname,\r\n      emoji : emoji,\r\n    });\r\n  }\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n    }\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    var my_choice, opponent_choice;\r\n    switch(this.state.my_choice){\r\n      case 'unknown':\r\n        my_choice = '🤔';\r\n        break;\r\n      case 'confession':\r\n        my_choice = '🙏';\r\n        break;\r\n      case 'silence':\r\n        my_choice = '💬';\r\n        break;\r\n    }\r\n    switch(this.state.opponent_choice){\r\n      case 'unknown':\r\n        opponent_choice = '🤔';\r\n        break;\r\n      case 'confession':\r\n        opponent_choice = '🙏';\r\n        break;\r\n      case 'silence':\r\n        opponent_choice = '💬';\r\n        break;\r\n    }\r\n    var my_emoji = this.emoji_select(this.state.my_emoji);\r\n    var opponent_emoji = this.emoji_select(this.state.opponent_emoji);\r\n\r\n    if(!this.state.result_mode) return(\r\n      <div className='prisoner'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={10000} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>Round {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n\r\n            <div className=\"prison\">\r\n              <div>\r\n                <div className=\"sentence\">\r\n                  🕓 : {this.state.my_sentence}년\r\n                </div>\r\n                <div className=\"emoji\">\r\n                  {my_emoji}\r\n                </div>\r\n                <div className=\"decision\">\r\n                  {my_choice}\r\n                </div>\r\n                <label>{this.props.user_info.nickname}</label>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"sentence\">\r\n                  🕓 : {this.state.opponent_sentence}년\r\n                </div>\r\n                <div className=\"emoji\">\r\n                  {opponent_emoji}\r\n                </div>\r\n                <div className=\"decision\">\r\n                  {opponent_choice}\r\n                </div>\r\n                <label>{this.state.opponent_name}</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"choice\">\r\n              <div>\r\n                <button onClick={()=>{this.onClick4('confession')}}>🙏</button>\r\n                <label>자백</label>\r\n              </div>\r\n\r\n              <div>\r\n                <button onClick={()=>{this.onClick4('silence')}}>💬</button>\r\n                <label>침묵</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"emoji_select\">\r\n              <button onClick={()=>{this.onClick5(0)}}>😄</button>\r\n              <button onClick={()=>{this.onClick5(1)}}>😅</button>\r\n              <button onClick={()=>{this.onClick5(2)}}>😂</button>\r\n              <button onClick={()=>{this.onClick5(3)}}>😜</button>\r\n              <button onClick={()=>{this.onClick5(4)}}>😒</button>\r\n              <button onClick={()=>{this.onClick5(5)}}>😓</button>\r\n              <button onClick={()=>{this.onClick5(6)}}>😠</button>\r\n              <button onClick={()=>{this.onClick5(7)}}>😤</button>\r\n              <button onClick={()=>{this.onClick5(8)}}>😭</button>\r\n              <button onClick={()=>{this.onClick5(9)}}>😱</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n    else return(\r\n      <Game_result data={this.state.result}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Prisoner);\r\n","C:\\psychology\\src\\components\\war_and_peace\\war_and_peace.js",["279","280","281","282","283","284","285","286"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport Player from './player';\r\nimport socket from '../../socket.js';\r\nimport '../css/war_and_peace.css';\r\nimport Game_result from '../game_result';\r\nconst moment = require('moment-timezone');\r\n\r\nclass War_and_peace extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      time : 10000,\r\n      user_list : [],\r\n      power_up : 0,\r\n      result_mode : false,\r\n      result : new Map(),\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      var user_map = new Map();\r\n      for(var user of data.userList){\r\n        user_map.set(user.userID, {\r\n          active : true,\r\n          emoji : 0,\r\n          point : 0,\r\n          strength : 0,\r\n          targeted : 0,\r\n        });\r\n      }\r\n      for(var i=0;i<5-data.userNumber;i++){\r\n        user_map.set(`empty${i}`, {\r\n          active : false,\r\n        });\r\n      }\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        user_map : user_map,\r\n      });\r\n    });\r\n  }\r\n  gameEnd = ()=>{\r\n    var result = new Map();\r\n    for(let [key, value] of this.state.user_map){\r\n      if(value.active) result.set(key, value.point);\r\n    }\r\n    this.setState({\r\n      result : result,\r\n      result_mode : true,\r\n    });\r\n    socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n    socket.emit('game result', {\r\n      userID : this.props.user_info.nickname, \r\n      point : result.get(this.props.user_info.nickname),\r\n      exp : 2000,\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        var info = _user_map.get(key);\r\n        if(this.state.round===1) info.point = info.point+200;\r\n        else info.point = info.point+100;\r\n        _user_map.set(key, info);\r\n      }\r\n      this.setState({\r\n        step : 1,\r\n        user_map : _user_map,\r\n      });\r\n    });\r\n    // timer1 start\r\n    socket.on('timer1 start', (data)=>{\r\n      console.log('timer1 start');\r\n      this.setState({\r\n        step : 2,\r\n        timer : true,\r\n      });\r\n    });\r\n    // timer1 end\r\n    socket.on('timer1 end', (data)=>{\r\n      console.log('timer1 end');\r\n      socket.emit('power upgrade', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        point : this.state.power_up,\r\n      });\r\n      this.setState({\r\n        step : 3,\r\n        timer : false,\r\n      });\r\n    });\r\n    // timer2 start\r\n    socket.on('timer2 start', (data)=>{\r\n      console.log('timer2 start');\r\n      this.setState({\r\n        step : 4,\r\n        time : 15000,\r\n        timer : true,\r\n      });\r\n    });\r\n    // timer2 end\r\n    socket.on('timer2 end', (data)=>{\r\n      console.log('timer2 end');\r\n      // result check\r\n      // state update\r\n      this.setState({\r\n        step : 5,\r\n        timer : false,\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        // get reward\r\n        if(key===this.state.confirmed_target){\r\n          socket.emit('get reward', {\r\n            roomID : this.state.roomID,\r\n            userID : this.props.user_info.nickname,\r\n            point : Math.round(value.point*0.4/value.targeted),\r\n          });\r\n        }\r\n        // deduction\r\n        var info = value;\r\n        if(value.targeted>0) {\r\n          info.point = Math.round(value.point*0.6); // -40%\r\n          _user_map.set(key, info);\r\n        }\r\n      }\r\n      this.setState({\r\n          step : 6,\r\n          user_map : _user_map,\r\n      });\r\n    });\r\n    // round end\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        var info = _user_map.get(key);\r\n        info.targeted = 0;\r\n        _user_map.set(key, info);\r\n      }\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        time : 10000,\r\n        target : '',\r\n        confirmed_target : '',\r\n        user_map : _user_map,\r\n        power_up : 0,\r\n      });\r\n      if(this.state.round!==6 && this.state.room_owner===this.props.user_info.nickname){\r\n        socket.emit('game start', {\r\n          roomID : this.state.roomID,\r\n          gameName : this.state.game_name,\r\n        });\r\n      } else if (this.state.round===6){\r\n        // if game ends\r\n        this.gameEnd();\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // emoji changed\r\n    socket.on('emoji change', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var _info = _user_map.get(data.userID);\r\n      _info.emoji = data.emoji;\r\n      _user_map.set(data.userID, _info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n    // target selected\r\n    socket.on('target selected', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(data.target);\r\n      info.targeted = info.targeted+1;\r\n      _user_map.set(data.target, info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n    // power upgrade\r\n    socket.on('power upgrade', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname){\r\n        var _user_map = this.state.user_map;\r\n        var info = _user_map.get(data.userID);\r\n        info.strength = info.strength+data.point;\r\n        info.point = info.point-data.point;\r\n        _user_map.set(data.userID, info);\r\n        this.setState({\r\n          user_map : _user_map,\r\n        });\r\n      }\r\n    });\r\n    // get reward\r\n    socket.on('get reward', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(data.userID);\r\n      info.point = info.point+data.point;\r\n      _user_map.set(data.userID, info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n  }\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  onClick4 = emoji=>{\r\n    socket.emit('emoji change', {\r\n      roomID : this.state.roomID,\r\n      userID : this.props.user_info.nickname,\r\n      emoji : emoji,\r\n    });\r\n  }\r\n  // set target\r\n  onClick5 = player=>{\r\n    var info = player[1];\r\n    var userID = player[0];\r\n    console.log(player);\r\n    if(this.state.step===4 && this.props.user_info.nickname!==userID && info.active && !this.state.confirmed_target){\r\n      this.setState({\r\n        target : userID\r\n      });\r\n    }\r\n  }\r\n  // plunder\r\n  onClick6 = ()=>{\r\n    if(this.state.target){\r\n      var my_power = this.state.user_map.get(this.props.user_info.nickname).strength;\r\n      var opponent_power = this.state.user_map.get(this.state.target).strength;\r\n      if(this.state.step===4 && (my_power > opponent_power) && !this.state.confirmed_target){\r\n        this.setState({\r\n          confirmed_target : this.state.target,\r\n        });\r\n        socket.emit('target selected', {\r\n          roomID : this.state.roomID,\r\n          userID : this.props.user_info.nickname,\r\n          target : this.state.target,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  // power upgrade\r\n  onClick7 = ()=>{\r\n    var strength = this.state.user_map.get(this.props.user_info.nickname).strength;\r\n    if(this.state.step===2 && (strength + this.state.power_up < this.state.round*100)){\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(this.props.user_info.nickname);\r\n      info.strength = info.strength + 100;\r\n      info.point = info.point - 100;\r\n      _user_map.set(this.props.user_info.nickname, info);\r\n      this.setState({\r\n        power_up : this.state.power_up + 100,\r\n        user_map : _user_map,\r\n      });\r\n    }\r\n  }\r\n\r\n  // set\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n    }\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // player array\r\n    var players = [];\r\n    if(this.state.user_map) players = Array.from(this.state.user_map);\r\n    else {\r\n      for(var i=0;i<5;i++){\r\n        players.push([`empty${i}`, {active : false}]);\r\n      }\r\n    }\r\n    // button\r\n    var button;\r\n    if(this.state.step===2) button = <button onClick={this.onClick7}>군사력 증강💪</button>;\r\n    else if(this.state.step===4) button = <button onClick={this.onClick6}>약탈💣</button>;\r\n    else button = <></>;\r\n\r\n    if(!this.state.result_mode) return(\r\n      <div className='war_and_peace'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={this.state.time} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>Round {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n            <div className=\"circle\"></div>\r\n\r\n            <div className=\"round_table\">\r\n              <div className=\"layer1\">\r\n                <Player player={players[0]} target={this.state.target} selected={this.state.target} onClick={()=>{this.onClick5(players[0])}}/>\r\n              </div>\r\n              <div className=\"layer2\">\r\n                <Player player={players[1]} target={this.state.target} onClick={()=>{this.onClick5(players[1])}}/>\r\n                {button}\r\n                <Player player={players[2]} target={this.state.target} onClick={()=>{this.onClick5(players[2])}}/>\r\n              </div>\r\n              <div className=\"layer3\">\r\n                <Player player={players[3]} target={this.state.target} onClick={()=>{this.onClick5(players[3])}}/>\r\n                <Player player={players[4]} target={this.state.target} onClick={()=>{this.onClick5(players[4])}}/>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"emoji_select\">\r\n              <button onClick={()=>{this.onClick4(0)}}>😄</button>\r\n              <button onClick={()=>{this.onClick4(1)}}>😅</button>\r\n              <button onClick={()=>{this.onClick4(2)}}>😂</button>\r\n              <button onClick={()=>{this.onClick4(3)}}>😜</button>\r\n              <button onClick={()=>{this.onClick4(4)}}>😒</button>\r\n              <button onClick={()=>{this.onClick4(5)}}>😓</button>\r\n              <button onClick={()=>{this.onClick4(6)}}>😠</button>\r\n              <button onClick={()=>{this.onClick4(7)}}>😤</button>\r\n              <button onClick={()=>{this.onClick4(8)}}>😭</button>\r\n              <button onClick={()=>{this.onClick4(9)}}>😱</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n    else return(\r\n      <Game_result roomID={this.state.roomID} data={this.state.result}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(War_and_peace);\r\n","C:\\psychology\\src\\components\\war_and_peace\\player.js",["287"],"import React, {Component} from 'react';\r\nimport socket from '../../socket.js';\r\nimport '../css/player.css';\r\n\r\nclass Player extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      //\r\n    }\r\n  }\r\n  //\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n      default :\r\n        return '';\r\n    }\r\n  }\r\n  render(){\r\n    const info = this.props.player[1];\r\n    const userID = this.props.player[0];\r\n    const emoji = this.emoji_select(info.emoji);\r\n    const is_selected = this.props.target===userID;\r\n    if(info.active){\r\n      return(\r\n        <div className=\"player\">\r\n          <div className=\"targeted\">\r\n            💥{info.targeted}\r\n          </div>\r\n          <button onClick={this.props.onClick} className=\"emoji\">\r\n            {emoji}\r\n          </button>\r\n          <div className={\"userinfo\"+(is_selected ? \" selected\" : '')}>\r\n            <div className=\"username\">\r\n              {userID}\r\n            </div>\r\n            <div className=\"status\">\r\n              <span>💎 {info.point}</span>\r\n              <span>💪 {info.strength}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div className=\"player\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","C:\\psychology\\src\\components\\register.js",["288","289","290","291","292","293","294","295","296","297","298","299","300"],"C:\\psychology\\src\\components\\ranking.js",["301","302"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/ranking.css';\r\n\r\nclass Ranking extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      type : 'point',\r\n      users : [{}, {}, {}],\r\n    }\r\n  }\r\n  componentDidMount = ()=>{\r\n    fetch('/user/point')\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      this.setState({\r\n        users : data,\r\n      });\r\n    });\r\n  }\r\n  onClick = type =>{\r\n    this.setState({\r\n      type : type,\r\n    });\r\n    if(type==='point'){\r\n      fetch('/user/point')\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        this.setState({\r\n          users : data,\r\n        });\r\n      });\r\n    } else {\r\n      fetch('/user/exp')\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        this.setState({\r\n          users : data,\r\n        });\r\n      });\r\n    }\r\n  }\r\n  render(){\r\n    const {users} = this.state;\r\n    var table = [];\r\n    if(users){\r\n      var cnt = 0;\r\n      for(var user of users){\r\n        cnt++;\r\n        if(cnt>3){\r\n          table.push(\r\n            <tr className={cnt%2===0 ? \"even\" : \"odd\"}>\r\n              <th className=\"table-rank\">{cnt}</th>\r\n              <td className=\"table-nickname\">{user.nickname}</td>\r\n              <td className=\"table-point\">{user.point}</td>\r\n              <td className=\"table-level\">{calLevel(user.exp)}</td>\r\n              <td className=\"table-game\">{user.game}</td>\r\n              <td className=\"table-ppg\">{user.game===0 ? (0).toFixed(3) : (user.point/user.game).toFixed(3)}</td>\r\n            </tr>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return(\r\n      <div className='ranking'>\r\n        <div className=\"rank\">\r\n          <button onClick={()=>{this.onClick('point')}}\r\n          className={this.state.type==='point' ? 'select' : ''}>포인트</button>\r\n          <button onClick={()=>{this.onClick('level')}}\r\n          className={this.state.type==='level' ? 'select' : ''}>레벨</button>\r\n        </div>\r\n        <hr/>\r\n        <div className=\"ranker\">\r\n          <div className=\"sub\">\r\n\r\n            <div className=\"name\">\r\n              <span>#2 </span>\r\n              <span>{users[1].nickname}</span>\r\n            </div>\r\n\r\n            <div className=\"status\">\r\n              <div>\r\n                총 포인트<br/>\r\n                레벨<br/>\r\n                게임 수<br/>\r\n                게임 당 포인트\r\n              </div>\r\n              <div>\r\n                {users[1].point}<br/>\r\n                {calLevel(users[1].exp)}<br/>\r\n                {users[1].game}<br/>\r\n                {users[1].game===0 ? (0).toFixed(3) : (users[1].point/users[1].game).toFixed(3)}<br/>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"main\">\r\n\r\n            <div className=\"name\">\r\n              <span>#1 </span>\r\n              <span>{users[0].nickname}</span>\r\n            </div>\r\n\r\n            <div className=\"status\">\r\n              <div>\r\n                총 포인트<br/>\r\n                레벨<br/>\r\n                게임 수<br/>\r\n                게임 당 포인트\r\n              </div>\r\n              <div>\r\n                {users[0].point}<br/>\r\n                {calLevel(users[0].exp)}<br/>\r\n                {users[0].game}<br/>\r\n                {users[0].game===0 ? (0).toFixed(3) : (users[0].point/users[0].game).toFixed(3)}<br/>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"sub\">\r\n\r\n            <div className=\"name\">\r\n              <span>#3 </span>\r\n              <span>{users[2].nickname}</span>\r\n            </div>\r\n\r\n            <div className=\"status\">\r\n              <div>\r\n                총 포인트<br/>\r\n                레벨<br/>\r\n                게임 수<br/>\r\n                게임 당 포인트\r\n              </div>\r\n              <div>\r\n                {users[2].point}<br/>\r\n                {calLevel(users[2].exp)}<br/>\r\n                {users[2].game}<br/>\r\n                {users[2].game===0 ? (0).toFixed(3) : (users[2].point/users[2].game).toFixed(3)}<br/>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <table>\r\n          <tr className=\"table-header\">\r\n            <th className=\"table-rank\">#</th>\r\n            <th className=\"table-nickname\">닉네임</th>\r\n            <th className=\"table-point\">총 포인트</th>\r\n            <th className=\"table-level\">레벨</th>\r\n            <th className=\"table-game\">게임 수</th>\r\n            <th className=\"table-ppg\">게임 당 포인트</th>\r\n          </tr>\r\n          {table}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calLevel(exp){\r\n  return 1 + Math.floor(exp/300);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\r\n","C:\\psychology\\src\\components\\game_result.js",["303","304","305"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/game_result.css';\r\nimport socket from '../socket.js';\r\n\r\nclass Game_result extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onClick1 = ()=>{\r\n    window.location.replace('/');\r\n  }\r\n\r\n  render(){\r\n    const { data } = this.props;\r\n    var arr = Array.from(data).sort((a, b)=>{\r\n      return b[1]-a[1];\r\n    });\r\n    var result = [];\r\n    var cnt = 0;\r\n    for(var el of arr){\r\n      cnt++;\r\n      result.push(<div className={this.props.user_info.nickname===el[0] ? 'mine' : ''}>\r\n        <span>{cnt}. {el[0]}</span>\r\n        <span>+ {el[1]} point</span>\r\n      </div>);\r\n    }\r\n    return(\r\n      <div className='game_result'>\r\n        <div>\r\n          <span>게임 결과</span>\r\n        </div>\r\n        <div className=\"result\">\r\n          {result}\r\n        </div>\r\n        <button onClick = {this.onClick1}>확인</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game_result);\r\n","C:\\psychology\\src\\function\\level.js",[],"C:\\psychology\\src\\components\\reverse_auction\\reverse_auction.js",["306","307","308","309","310","311"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport socket from '../../socket.js';\r\nimport '../css/reverse_auction.css';\r\nimport Player from './player';\r\nimport Item from './item';\r\nimport Price_timer from './price_timer';\r\nimport Game_result from '../game_result';\r\nconst moment = require('moment-timezone');\r\n\r\nclass Reverse_auction extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.timer = 0;\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 20,\r\n      timer : false,\r\n      time : 10000,\r\n      user_list : [],\r\n      count : 0,\r\n      display_price : 0,\r\n      result_mode : false,\r\n      result : new Map(),\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      // initialize user_map\r\n      var user_map = new Map();\r\n      for(var user of data.userList){\r\n        user_map.set(user.userID, {\r\n          active : true,\r\n          cash : 10000000, // 잔고\r\n          value : 0, // 평가액\r\n          items : [],\r\n        });\r\n      }\r\n      for(var i = 0;i<8-data.userList.length;i++){\r\n        user_map.set(`dummy${i}`, {\r\n          active : false,\r\n        });\r\n      }\r\n      // set state\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        user_map : user_map,\r\n      });\r\n      // get items info\r\n      if(this.props.user_info.nickname===data.roomOwner){\r\n        socket.emit('get items', {\r\n          roomID : data.roomID\r\n        });\r\n      }\r\n    });\r\n  }\r\n  gameEnd = ()=>{\r\n    var result = new Map();\r\n    for(let [key, value] of this.state.user_map){\r\n      if(value.active) result.set(key, value.value/100);\r\n    }\r\n    this.setState({\r\n      result : result,\r\n      result_mode : true,\r\n    });\r\n    socket.emit('exit room', {roomID : this.state.roomID, userID : this.props.user_info.nickname});\r\n    socket.emit('game result', {\r\n      userID : this.props.user_info.nickname,\r\n      point : result.get(this.props.user_info.nickname),\r\n      exp : 2000,\r\n    });\r\n  }\r\n  timerEnd = ()=>{\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      step : 3,\r\n      count : 0,\r\n      timer : false,\r\n    });\r\n    if(this.state.room_owner === this.props.user_info.nickname){\r\n      socket.emit('auction skip', {\r\n        roomID : this.state.roomID,\r\n      });\r\n    }\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      // update display price first\r\n      this.setState({\r\n        display_price : this.state.items[this.state.round-1].value*2,\r\n      });\r\n      // then update step\r\n      setTimeout(()=>{\r\n        this.setState({\r\n          step : 1,\r\n          // set random item\r\n          item : this.state.items[this.state.round-1]\r\n        });\r\n      }, 200);\r\n    });\r\n    // auction start\r\n    socket.on('auction start', (data)=>{\r\n      console.log('auction start');\r\n      this.setState({\r\n        step : 2,\r\n        timer : true,\r\n      });\r\n      this.timer = setInterval(()=>{\r\n        this.setState({count : this.state.count+1});\r\n      }, 10);\r\n    });\r\n    // auction end\r\n    socket.on('auction end', (data)=>{\r\n      if(this.state.step===2){\r\n        console.log('auction end');\r\n        // clear timer\r\n        clearInterval(this.timer);\r\n        // update user_map\r\n        var user_map = this.state.user_map;\r\n        var info = user_map.get(data.userID);\r\n        info.items.push(this.state.item);\r\n        info.cash -= data.price;\r\n        info.value += this.state.item.value;\r\n        user_map.set(data.userID, info);\r\n        this.setState({\r\n          user_map : user_map,\r\n          step : 3,\r\n          timer : false,\r\n          display_price : data.price,\r\n          count : 0,\r\n        });\r\n        //\r\n        if(this.state.room_owner === this.props.user_info.nickname){\r\n          socket.emit('auction skip', {roomID : this.state.roomID});\r\n        }\r\n      }\r\n    });\r\n    // round end\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        item : {},\r\n        display_price : 0,\r\n      });\r\n      if(this.state.round!==21 && this.state.room_owner===this.props.user_info.nickname){\r\n        socket.emit('game start', {\r\n          roomID : this.state.roomID,\r\n          gameName : this.state.game_name,\r\n        });\r\n      } else if (this.state.round===21){\r\n        // if game ends\r\n        this.gameEnd();\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    socket.on('get items', (data)=>{\r\n      this.setState({\r\n        items : data.items,\r\n      });\r\n    });\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onClick2 = e=>{\r\n    if(this.state.step===2){\r\n      // check whether i can buy this item\r\n      var ratio = this.state.count*10/this.state.time;\r\n      var price = this.state.item.value*2*(1-ratio);\r\n      var cash = this.state.user_map.get(this.props.user_info.nickname).cash;\r\n      if(price <= cash){\r\n        socket.emit('auction end', {\r\n          roomID : this.state.roomID,\r\n          userID : this.props.user_info.nickname,\r\n          price : price,\r\n        });\r\n        this.setState({\r\n          timer : false,\r\n          display_price : price,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // player data\r\n    var players = [];\r\n    if(this.state.user_map) players = Array.from(this.state.user_map);\r\n    else {\r\n      for(var i=0;i<8;i++){\r\n        players.push([`empty${i}`, {active : false}]);\r\n      }\r\n    }\r\n    if(!this.state.result_mode) return(\r\n      <div className='reverse_auction'>\r\n\r\n        <div className=\"row1\">\r\n          <Player data={players[0]}/>\r\n          <Player data={players[2]}/>\r\n          <Player data={players[4]}/>\r\n          <Player data={players[6]}/>\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n          <div>{this.state.step!==0 ?\r\n            <><Item data={this.state.item}/> {this.state.item.name}</>\r\n            : '?'}\r\n          </div>\r\n          <Price_timer gameEnd={this.timerEnd}\r\n            start={this.state.timer}\r\n            color=\"#56aeff\"\r\n            time={this.state.time}\r\n            price={this.state.display_price}\r\n            step={this.state.step}\r\n          />\r\n          <button onClick={this.onClick2}>구매하기</button>\r\n        </div>\r\n\r\n        <div className=\"row3\">\r\n          <Player data={players[1]}/>\r\n          <Player data={players[3]}/>\r\n          <Player data={players[5]}/>\r\n          <Player data={players[7]}/>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n    else return(\r\n      <Game_result roomID={this.state.roomID} data={this.state.result}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reverse_auction);\r\n","C:\\psychology\\src\\components\\reverse_auction\\player.js",[],"C:\\psychology\\src\\components\\reverse_auction\\item.js",["312","313"],"import React, {Component} from 'react';\r\n\r\nimport apple from './assets/apple.png';\r\nimport book from './assets/book.png';\r\nimport camera from './assets/camera.png';\r\nimport clip from './assets/clip.png';\r\nimport diamond from './assets/diamond.png';\r\nimport film from './assets/film.png';\r\nimport key from './assets/key.png';\r\nimport laptop from './assets/laptop.png';\r\nimport orb from './assets/orb.png';\r\nimport paint from './assets/paint.png';\r\nimport pill from './assets/pill.png';\r\nimport radio from './assets/radio.png';\r\nimport telescope from './assets/telescope.png';\r\n\r\nclass Item extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  render(){\r\n    let color;\r\n    let src;\r\n    switch(this.props.data.color){\r\n      case 0:\r\n        color = 'red';\r\n        break;\r\n      case 1:\r\n        color = 'green';\r\n        break;\r\n      case 2:\r\n        color = 'blue';\r\n        break;\r\n      case 3:\r\n        color = 'yellow';\r\n        break;\r\n      default:\r\n        color = 'red';\r\n        break;\r\n    }\r\n    switch(this.props.data.body){\r\n      case 'apple':\r\n        src = apple;\r\n        break;\r\n      case 'book':\r\n        src = book;\r\n        break;\r\n      case 'camera':\r\n        src = camera;\r\n        break;\r\n      case 'clip':\r\n        src = clip;\r\n        break;\r\n      case 'diamond':\r\n        src = diamond;\r\n        break;\r\n      case 'film':\r\n        src = film;\r\n        break;\r\n      case 'key':\r\n        src = key;\r\n        break;\r\n      case 'laptop':\r\n        src = laptop;\r\n        break;\r\n      case 'orb':\r\n        src = orb;\r\n        break;\r\n      case 'paint':\r\n        src = paint;\r\n        break;\r\n      case 'pill':\r\n        src = pill;\r\n        break;\r\n      case 'radio':\r\n        src = radio;\r\n        break;\r\n      case 'telescope':\r\n        src = telescope;\r\n        break;\r\n    }\r\n    return(\r\n      <div className={\"auction_item \"+color}>\r\n        <img src={src} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","C:\\psychology\\src\\components\\reverse_auction\\price_timer.js",["314"],"import React, {Component} from 'react';\r\nimport '../css/price_timer.css';\r\n\r\nclass Price_timer extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n    this.timer = 0;\r\n    this.state = {\r\n      count : 0,\r\n    };\r\n  }\r\n  canvasClear = (ratio, price)=>{\r\n    var canvas = this.canvasRef.current;\r\n    var ctx = canvas.getContext('2d');\r\n    // clear\r\n    ctx.clearRect(0,0,canvas.width, canvas.height);\r\n    // set border\r\n    ctx.strokeStyle = this.props.color;\r\n    ctx.beginPath();\r\n    ctx.arc(200, 200, 190, 2*Math.PI*(-0.25+ratio), -0.5*Math.PI );\r\n    ctx.lineWidth = 10;\r\n    ctx.stroke();\r\n    // innter circle\r\n    ctx.beginPath();\r\n    ctx.arc(200, 200, 185, 0, 2*Math.PI);\r\n    ctx.fillStyle = \"#222b3d\";\r\n    ctx.fill();\r\n\r\n    // set inner text\r\n    ctx.beginPath();\r\n    ctx.textAlign = \"center\";\r\n    ctx.font = \"50px Arial\";\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.fillText(numberWithCommas(Math.round(price*(1-ratio)))+'원', 200, 220);\r\n    ctx.stroke();\r\n  }\r\n  stopCanvas = (ratio, price)=>{\r\n    var canvas = this.canvasRef.current;\r\n    var ctx = canvas.getContext('2d');\r\n    // clear\r\n    ctx.clearRect(0,0,canvas.width, canvas.height);\r\n    // set border\r\n    ctx.strokeStyle = this.props.color;\r\n    ctx.beginPath();\r\n    ctx.arc(200, 200, 190, 2*Math.PI*(-0.25+ratio), -0.5*Math.PI );\r\n    ctx.lineWidth = 10;\r\n    ctx.stroke();\r\n    // innter circle\r\n    ctx.beginPath();\r\n    ctx.arc(200, 200, 185, 0, 2*Math.PI);\r\n    ctx.fillStyle = \"#222b3d\";\r\n    ctx.fill();\r\n\r\n    // set inner text\r\n    ctx.beginPath();\r\n    ctx.textAlign = \"center\";\r\n    ctx.font = \"50px Arial\";\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.fillText(numberWithCommas(Math.round(price))+'원', 200, 220);\r\n    ctx.stroke();\r\n  }\r\n  componentDidMount = ()=>{\r\n    this.canvasClear(1, this.props.price);\r\n\r\n    if(this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n    }\r\n  }\r\n  componentWillReceiveProps = (nextProps)=>{\r\n    if(nextProps.start && !this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n      this.setState({count : 0});\r\n    }\r\n    if(nextProps.step===1 && this.props.step===0){\r\n      console.log('check');\r\n      this.stopCanvas(1, this.props.price);\r\n    }\r\n  }\r\n  componentWillUnmount = ()=>{\r\n    clearInterval(this.timer);\r\n  }\r\n  draw = ()=>{\r\n    var canvas = this.canvasRef.current;\r\n    if(canvas){\r\n      var ctx = canvas.getContext('2d');\r\n      // check it's stopped\r\n      if(!this.props.start){\r\n        clearInterval(this.timer);\r\n        this.stopCanvas(1, this.props.price);\r\n      } else {\r\n        // count time\r\n        this.setState({\r\n          count : this.state.count+1,\r\n        });\r\n\r\n        // check timer is done\r\n        var ratio = this.state.count*10/this.props.time;\r\n        if(ratio>=1) {\r\n          clearInterval(this.timer);\r\n          this.setState({count : 0});\r\n          this.canvasClear(1, 0);\r\n          this.props.gameEnd();\r\n        }\r\n\r\n        // time bar update\r\n        this.canvasClear(ratio, this.props.price);\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"price_timer\">\r\n       <canvas ref={this.canvasRef} width=\"400\" height=\"400\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport default Price_timer;\r\n","C:\\psychology\\src\\components\\account_check.js",["315","316","317"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/account_check.css';\r\nimport Login from './login';\r\n\r\nclass Account_check extends Component{\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired\r\n  };\r\n  constructor(props){\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value\r\n    });\r\n  }\r\n  onClick1 = ()=>{\r\n    const guestNick = document.getElementById('guestNick').value;\r\n    if(!guestNick) {\r\n      alert('닉네임을 입력해주세요');\r\n      return;\r\n    }\r\n    var {cookies} = this.props;\r\n    if(!cookies) cookies = new Cookies();\r\n    cookies.set('guest nickname', guestNick, {path:'/'});\r\n    this.props.handleSuccess({nickname : guestNick});\r\n  }\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    // pc version\r\n    if(!mobile) return(\r\n      <div className='account_check'>\r\n        <div className=\"logo\">\r\n          <span>\r\n                GAME<br/>\r\n                THEORY<br/>\r\n                LABORATORY<br/>\r\n          </span>\r\n          <span>_게임이론 실험 플랫폼</span>\r\n        </div>\r\n\r\n        <label>회원이신가요?</label>\r\n        <Login history={this.props.history}/>\r\n\r\n        <label>나중에 할게요</label>\r\n        <input id=\"guestNick\" name=\"guestNick\" type=\"text\" placeholder=\"Nickname\" defaultValue={this.props.user_info.nickname}/>\r\n        <button onClick={this.onClick1}>Guest로 계속</button>\r\n\r\n      </div>\r\n    );\r\n    // mobile version\r\n    else return(\r\n      <div className='account_check'>\r\n        <div className=\"logo\">\r\n          <span>\r\n                GAME<br/>\r\n                THEORY<br/>\r\n                LABORATORY<br/>\r\n          </span>\r\n          <span>_게임이론 실험 플랫폼</span>\r\n        </div>\r\n\r\n        <label>회원이신가요?</label>\r\n        <Login toPrev={true}/>\r\n\r\n        <label>나중에 할게요</label>\r\n        <input id=\"guestNick\" name=\"guestNick\" type=\"text\" placeholder=\"Nickname\" defaultValue={this.props.user_info.nickname}/>\r\n        <button onClick={this.onClick1}>Guest로 계속</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n    setGuestMode : (info)=>{dispatch(actions.guest_mode(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withCookies(Account_check));\r\n","C:\\psychology\\src\\components\\private_room.js",["318","319","320","321"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport Game_container from './game_container';\r\nimport './css/private_room.css';\r\n\r\nclass Private_room extends Component{\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired\r\n  };\r\n  constructor(props){\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onSubmit = e=>{\r\n    e.preventDefault();\r\n    fetch(`/room/id/${this.state.code}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      if(data.error) alert('코드에 해당하는 방이 존재하지 않습니다');\r\n      else {\r\n        if(data.maxNumber<=data.userNumber) alert('정원이 모두 찬 방입니다');\r\n        else this.props.history.replace(`/game_ready/${data.roomID}`);\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    // pc version\r\n    if(!mobile) return(\r\n      <div className=\"private_room\">\r\n      </div>\r\n    );\r\n    // mobile version\r\n    else return(\r\n      <div className='private_room'>\r\n        <form onSubmit={this.onSubmit}>\r\n          <label>비공개방 참여</label>\r\n          <span>방 참가 코드를 입력하세요.</span>\r\n          <input type=\"text\" name=\"code\" required placeholder=\"Enter private room code\"/>\r\n          <button type=\"submit\">참여</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n    setGuestMode : (info)=>{dispatch(actions.guest_mode(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withCookies(Private_room));\r\n","C:\\psychology\\src\\components\\fast_start.js",["322","323"],"C:\\psychology\\src\\components\\account.js",["324","325","326","327"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport Game_container from './game_container';\r\nimport Login from './login';\r\nimport './css/account.css';\r\n\r\nclass Account extends Component{\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired\r\n  };\r\n  constructor(props){\r\n    super(props);\r\n    const { cookies } = props;\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n  onClick1 = e=>{\r\n    e.preventDefault();\r\n    const {cookies} = this.props;\r\n    const nickname = document.getElementById('nickname').value;\r\n    if(!nickname){\r\n      alert('닉네임을 입력해주세요');\r\n      return;\r\n    }\r\n    cookies.set('guest nickname', nickname, {path : '/'});\r\n    this.props.setGuestMode({nickname : nickname});\r\n\r\n  }\r\n  onClick2 = ()=>{\r\n    document.cookie = \"token=\";\r\n    fetch('/auth/logout',{\r\n      credentials : 'include'\r\n    })\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      window.location.replace('/');\r\n    });\r\n  }\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    // pc version\r\n    if(!mobile) return(\r\n      <div className=\"account\">\r\n      </div>\r\n    );\r\n    // mobile version\r\n    else return(\r\n      <div className='account'>\r\n        <label>계정</label>\r\n        <span>닉네임, 로그인 정보를 확인하세요.</span>\r\n        {\r\n            this.props.is_guest ?\r\n            <div>\r\n              <label>닉네임 변경</label>\r\n              <input id=\"nickname\" type=\"text\" defaultValue={this.props.user_info.nickname}/>\r\n              <button onClick={this.onClick1}>변경</button>\r\n              <p>\r\n                현재 <span className=\"hl\">{this.props.user_info.nickname}</span>님은 '게스트'상태입니다.\r\n                게임 결과 통계 및 랭킹 등 더 많은 정보를 확인하고 싶으시다면 로그인해주세요.\r\n              </p>\r\n              <Login history={this.props.history} toPrev={true}/>\r\n            </div>\r\n            :\r\n            <div>\r\n              <p>\r\n                현재 <span className=\"hl\">{this.props.user_info.nickname}</span>으로 로그인된 상태입니다.\r\n              </p>\r\n              <label>닉네임 변경</label>\r\n              <input id=\"nickname\" type=\"text\" defaultValue={this.props.user_info.nickname}/>\r\n              <button>변경</button>\r\n              <label>Email : {this.props.user_info.email}</label>\r\n              <label>총 point : {this.props.user_info.point}</label>\r\n              <label>Game 수 : {this.props.user_info.game}</label>\r\n              <button onClick={this.onClick2}>로그아웃</button>\r\n            </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_guest : state.login.is_guest,\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n    setGuestMode : (info)=>{dispatch(actions.guest_mode(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withCookies(Account));\r\n","C:\\psychology\\src\\components\\game_intro.js",["328","329","330"],{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","severity":1,"message":"336","line":2,"column":25,"nodeType":"337","messageId":"338","endLine":2,"endColumn":29},{"ruleId":"335","severity":1,"message":"339","line":45,"column":13,"nodeType":"337","messageId":"338","endLine":45,"endColumn":20},{"ruleId":"335","severity":1,"message":"340","line":93,"column":15,"nodeType":"337","messageId":"338","endLine":93,"endColumn":19},{"ruleId":"335","severity":1,"message":"341","line":102,"column":11,"nodeType":"337","messageId":"338","endLine":102,"endColumn":17},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"343","line":10,"column":8,"nodeType":"337","messageId":"338","endLine":10,"endColumn":13},{"ruleId":"335","severity":1,"message":"339","line":18,"column":13,"nodeType":"337","messageId":"338","endLine":18,"endColumn":20},{"ruleId":"344","severity":1,"message":"345","line":70,"column":37,"nodeType":"346","endLine":70,"endColumn":82},{"ruleId":"344","severity":1,"message":"347","line":80,"column":11,"nodeType":"346","endLine":80,"endColumn":110},{"ruleId":"344","severity":1,"message":"347","line":81,"column":11,"nodeType":"346","endLine":81,"endColumn":119},{"ruleId":"344","severity":1,"message":"347","line":82,"column":11,"nodeType":"346","endLine":82,"endColumn":113},{"ruleId":"344","severity":1,"message":"347","line":83,"column":11,"nodeType":"346","endLine":83,"endColumn":104},{"ruleId":"344","severity":1,"message":"347","line":84,"column":11,"nodeType":"346","endLine":84,"endColumn":110},{"ruleId":"344","severity":1,"message":"347","line":85,"column":11,"nodeType":"346","endLine":85,"endColumn":111},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"348","line":7,"column":8,"nodeType":"337","messageId":"338","endLine":7,"endColumn":16},{"ruleId":"335","severity":1,"message":"339","line":16,"column":13,"nodeType":"337","messageId":"338","endLine":16,"endColumn":20},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"349","line":4,"column":8,"nodeType":"337","messageId":"338","endLine":4,"endColumn":21},{"ruleId":"344","severity":1,"message":"350","line":45,"column":21,"nodeType":"346","endLine":45,"endColumn":90},{"ruleId":"351","severity":1,"message":"352","line":45,"column":55,"nodeType":"353","messageId":"354","endLine":45,"endColumn":87},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"355","line":61,"column":11,"nodeType":"337","messageId":"338","endLine":61,"endColumn":17},{"ruleId":"356","severity":1,"message":"357","line":151,"column":15,"nodeType":"337","messageId":"358","endLine":151,"endColumn":16},{"ruleId":"359","severity":1,"message":"360","line":178,"column":42,"nodeType":"361","messageId":"362","endLine":178,"endColumn":44},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"363","severity":1,"message":"364","line":18,"column":11,"nodeType":"346","endLine":18,"endColumn":38},{"ruleId":"363","severity":1,"message":"364","line":32,"column":11,"nodeType":"346","endLine":32,"endColumn":38},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"363","severity":1,"message":"364","line":61,"column":9,"nodeType":"346","endLine":61,"endColumn":36},{"ruleId":"335","severity":1,"message":"365","line":1,"column":48,"nodeType":"337","messageId":"338","endLine":1,"endColumn":57},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"366","line":7,"column":7,"nodeType":"337","messageId":"338","endLine":7,"endColumn":14},{"ruleId":"367","severity":1,"message":"368","line":45,"column":13,"nodeType":"353","endLine":92,"endColumn":4},{"ruleId":"367","severity":1,"message":"369","line":50,"column":14,"nodeType":"370","endLine":50,"endColumn":31},{"ruleId":"367","severity":1,"message":"371","line":51,"column":11,"nodeType":"372","endLine":51,"endColumn":34},{"ruleId":"367","severity":1,"message":"373","line":55,"column":21,"nodeType":"374","endLine":55,"endColumn":28},{"ruleId":"367","severity":1,"message":"375","line":81,"column":18,"nodeType":"374","endLine":81,"endColumn":22},{"ruleId":"367","severity":1,"message":"376","line":83,"column":19,"nodeType":"374","endLine":83,"endColumn":29},{"ruleId":"367","severity":1,"message":"377","line":85,"column":14,"nodeType":"372","endLine":88,"endColumn":14},{"ruleId":"356","severity":1,"message":"378","line":142,"column":13,"nodeType":"337","messageId":"358","endLine":142,"endColumn":18},{"ruleId":"356","severity":1,"message":"379","line":143,"column":13,"nodeType":"337","messageId":"358","endLine":143,"endColumn":18},{"ruleId":"335","severity":1,"message":"380","line":1,"column":16,"nodeType":"337","messageId":"338","endLine":1,"endColumn":25},{"ruleId":"335","severity":1,"message":"381","line":1,"column":27,"nodeType":"337","messageId":"338","endLine":1,"endColumn":36},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"382","line":10,"column":8,"nodeType":"337","messageId":"338","endLine":10,"endColumn":12},{"ruleId":"356","severity":1,"message":"357","line":119,"column":15,"nodeType":"337","messageId":"358","endLine":119,"endColumn":16},{"ruleId":"356","severity":1,"message":"383","line":120,"column":13,"nodeType":"337","messageId":"358","endLine":120,"endColumn":18},{"ruleId":"335","severity":1,"message":"355","line":169,"column":11,"nodeType":"337","messageId":"338","endLine":169,"endColumn":17},{"ruleId":"384","severity":1,"message":"385","line":196,"column":9,"nodeType":"386","messageId":"387","endLine":196,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":200,"column":9,"nodeType":"386","messageId":"387","endLine":200,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":204,"column":9,"nodeType":"386","messageId":"387","endLine":204,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":208,"column":9,"nodeType":"386","messageId":"387","endLine":208,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":212,"column":9,"nodeType":"386","messageId":"387","endLine":212,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":216,"column":9,"nodeType":"386","messageId":"387","endLine":216,"endColumn":15},{"ruleId":"384","severity":1,"message":"385","line":219,"column":9,"nodeType":"386","messageId":"387","endLine":219,"endColumn":15},{"ruleId":"356","severity":1,"message":"357","line":292,"column":13,"nodeType":"337","messageId":"358","endLine":292,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":297,"column":13,"nodeType":"337","messageId":"358","endLine":297,"endColumn":14},{"ruleId":"363","severity":1,"message":"364","line":322,"column":15,"nodeType":"346","endLine":322,"endColumn":32},{"ruleId":"344","severity":1,"message":"388","line":365,"column":7,"nodeType":"346","endLine":365,"endColumn":48},{"ruleId":"335","severity":1,"message":"389","line":81,"column":9,"nodeType":"337","messageId":"338","endLine":81,"endColumn":14},{"ruleId":"335","severity":1,"message":"390","line":117,"column":5,"nodeType":"337","messageId":"338","endLine":117,"endColumn":8},{"ruleId":"331","replacedBy":"391"},{"ruleId":"333","replacedBy":"392"},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"355","line":48,"column":12,"nodeType":"337","messageId":"338","endLine":48,"endColumn":18},{"ruleId":"344","severity":1,"message":"393","line":182,"column":15,"nodeType":"346","endLine":182,"endColumn":30},{"ruleId":"344","severity":1,"message":"388","line":200,"column":7,"nodeType":"346","endLine":200,"endColumn":73},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"355","line":151,"column":11,"nodeType":"337","messageId":"338","endLine":151,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":219,"column":5,"nodeType":"396","messageId":"397","endLine":240,"endColumn":6},{"ruleId":"394","severity":1,"message":"395","line":275,"column":5,"nodeType":"396","messageId":"397","endLine":285,"endColumn":6},{"ruleId":"394","severity":1,"message":"395","line":286,"column":5,"nodeType":"396","messageId":"397","endLine":296,"endColumn":6},{"ruleId":"344","severity":1,"message":"388","line":384,"column":7,"nodeType":"346","endLine":384,"endColumn":46},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"398","line":81,"column":21,"nodeType":"337","messageId":"338","endLine":81,"endColumn":26},{"ruleId":"335","severity":1,"message":"398","line":161,"column":21,"nodeType":"337","messageId":"338","endLine":161,"endColumn":26},{"ruleId":"335","severity":1,"message":"355","line":194,"column":11,"nodeType":"337","messageId":"338","endLine":194,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":323,"column":5,"nodeType":"396","messageId":"397","endLine":344,"endColumn":6},{"ruleId":"356","severity":1,"message":"357","line":382,"column":15,"nodeType":"337","messageId":"358","endLine":382,"endColumn":16},{"ruleId":"344","severity":1,"message":"388","line":452,"column":7,"nodeType":"346","endLine":452,"endColumn":73},{"ruleId":"335","severity":1,"message":"399","line":2,"column":8,"nodeType":"337","messageId":"338","endLine":2,"endColumn":14},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"400","severity":1,"message":"401","line":25,"column":29,"nodeType":"374","messageId":"402","endLine":25,"endColumn":30,"suggestions":"403"},{"ruleId":"335","severity":1,"message":"404","line":26,"column":13,"nodeType":"337","messageId":"338","endLine":26,"endColumn":19},{"ruleId":"359","severity":1,"message":"360","line":27,"column":22,"nodeType":"361","messageId":"362","endLine":27,"endColumn":24},{"ruleId":"359","severity":1,"message":"405","line":31,"column":25,"nodeType":"361","messageId":"362","endLine":31,"endColumn":27},{"ruleId":"359","severity":1,"message":"360","line":56,"column":33,"nodeType":"361","messageId":"362","endLine":56,"endColumn":35},{"ruleId":"359","severity":1,"message":"360","line":56,"column":63,"nodeType":"361","messageId":"362","endLine":56,"endColumn":65},{"ruleId":"359","severity":1,"message":"360","line":63,"column":45,"nodeType":"361","messageId":"362","endLine":63,"endColumn":47},{"ruleId":"359","severity":1,"message":"360","line":63,"column":77,"nodeType":"361","messageId":"362","endLine":63,"endColumn":79},{"ruleId":"359","severity":1,"message":"360","line":70,"column":45,"nodeType":"361","messageId":"362","endLine":70,"endColumn":47},{"ruleId":"359","severity":1,"message":"360","line":70,"column":78,"nodeType":"361","messageId":"362","endLine":70,"endColumn":80},{"ruleId":"384","severity":1,"message":"385","line":87,"column":19,"nodeType":"386","messageId":"387","endLine":87,"endColumn":25},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"399","line":6,"column":8,"nodeType":"337","messageId":"338","endLine":6,"endColumn":14},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"406","line":5,"column":8,"nodeType":"337","messageId":"338","endLine":5,"endColumn":13},{"ruleId":"356","severity":1,"message":"357","line":246,"column":15,"nodeType":"337","messageId":"358","endLine":246,"endColumn":16},{"ruleId":"344","severity":1,"message":"407","line":265,"column":11,"nodeType":"346","endLine":271,"endColumn":13},{"ruleId":"344","severity":1,"message":"388","line":285,"column":7,"nodeType":"346","endLine":285,"endColumn":73},{"ruleId":"394","severity":1,"message":"395","line":43,"column":5,"nodeType":"396","messageId":"397","endLine":83,"endColumn":6},{"ruleId":"363","severity":1,"message":"364","line":86,"column":9,"nodeType":"346","endLine":86,"endColumn":26},{"ruleId":"335","severity":1,"message":"408","line":88,"column":11,"nodeType":"337","messageId":"338","endLine":88,"endColumn":14},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"339","line":16,"column":13,"nodeType":"337","messageId":"338","endLine":16,"endColumn":20},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"409","line":7,"column":8,"nodeType":"337","messageId":"338","endLine":7,"endColumn":22},{"ruleId":"335","severity":1,"message":"339","line":16,"column":13,"nodeType":"337","messageId":"338","endLine":16,"endColumn":20},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"339","line":15,"column":13,"nodeType":"337","messageId":"338","endLine":15,"endColumn":20},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"409","line":7,"column":8,"nodeType":"337","messageId":"338","endLine":7,"endColumn":22},{"ruleId":"335","severity":1,"message":"339","line":17,"column":13,"nodeType":"337","messageId":"338","endLine":17,"endColumn":20},{"ruleId":"335","severity":1,"message":"342","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"336","line":2,"column":17,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"339","line":15,"column":13,"nodeType":"337","messageId":"338","endLine":15,"endColumn":20},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'cookies' is assigned a value but never used.","'info' is assigned a value but never used.","'mobile' is assigned a value but never used.","'Route' is defined but never used.","'Login' is defined but never used.","react/jsx-pascal-case","Imported JSX component Generate_room must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Game_container must be in PascalCase or SCREAMING_SNAKE_CASE","'calLevel' is defined but never used.","'Generate_room' is defined but never used.","Imported JSX component Public_room must be in PascalCase or SCREAMING_SNAKE_CASE","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'data'.","ArrowFunctionExpression","unsafeRefs","'target' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Component' is defined but never used.","'request' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'backgroundMsg' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'showDots' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'gameState' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'timer1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'end_x' is already defined.","'end_y' is already defined.","'createRef' is defined but never used.","'useEffect' is defined but never used.","'src2' is defined but never used.","'_gold' is already defined.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","Imported JSX component Game_result must be in PascalCase or SCREAMING_SNAKE_CASE","'light' is assigned a value but never used.","'car' is assigned a value but never used.",["410"],["411"],"Imported JSX component No_more_hero must be in PascalCase or SCREAMING_SNAKE_CASE","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'value' is assigned a value but never used.","'socket' is defined but never used.","no-useless-escape","Unnecessary escape character: \\#.","unnecessaryEscape",["412","413"],"'pw_msg' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Timer' is defined but never used.","Imported JSX component Price_timer must be in PascalCase or SCREAMING_SNAKE_CASE","'ctx' is assigned a value but never used.","'Game_container' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"414","fix":"415","desc":"416"},{"messageId":"417","fix":"418","desc":"419"},"removeEscape",{"range":"420","text":"421"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"422","text":"423"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[701,702],"",[701,701],"\\"]