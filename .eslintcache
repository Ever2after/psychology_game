[{"C:\\psychology\\src\\index.js":"1","C:\\psychology\\src\\App.js":"2","C:\\psychology\\src\\reducers\\index.js":"3","C:\\psychology\\src\\reducers\\login.js":"4","C:\\psychology\\src\\reducers\\admin.js":"5","C:\\psychology\\src\\actions\\ActionTypes.js":"6","C:\\psychology\\src\\root.js":"7","C:\\psychology\\src\\components\\main.js":"8","C:\\psychology\\src\\components\\login.js":"9","C:\\psychology\\src\\components\\header.js":"10","C:\\psychology\\src\\components\\public_room_list.js":"11","C:\\psychology\\src\\components\\generate_room.js":"12","C:\\psychology\\src\\actions\\index.js":"13","C:\\psychology\\src\\components\\game_ready.js":"14","C:\\psychology\\src\\components\\public_room.js":"15","C:\\psychology\\src\\components\\game_container.js":"16","C:\\psychology\\src\\components\\moving_dots\\moving_dots.js":"17","C:\\psychology\\src\\reducers\\game.js":"18","C:\\psychology\\src\\components\\common\\timer.js":"19","C:\\psychology\\src\\components\\treasure_ship\\treasure_ship.js":"20","C:\\psychology\\src\\components\\treasure_ship\\ship_wreck.js":"21","C:\\psychology\\src\\components\\hero\\hero.js":"22","C:\\psychology\\src\\socket.js":"23","C:\\psychology\\src\\components\\hero\\fame.js":"24","C:\\psychology\\src\\components\\hero\\no_more_hero.js":"25","C:\\psychology\\src\\components\\prisoner\\prisoner.js":"26","C:\\psychology\\src\\components\\war_and_peace\\war_and_peace.js":"27","C:\\psychology\\src\\components\\war_and_peace\\player.js":"28","C:\\psychology\\src\\components\\register.js":"29","C:\\psychology\\src\\components\\ranking.js":"30"},{"size":471,"mtime":1610882389621,"results":"31","hashOfConfig":"32"},{"size":2145,"mtime":1613473622402,"results":"33","hashOfConfig":"32"},{"size":248,"mtime":1611508772868,"results":"34","hashOfConfig":"32"},{"size":631,"mtime":1613463955403,"results":"35","hashOfConfig":"32"},{"size":599,"mtime":1610882213126,"results":"36","hashOfConfig":"32"},{"size":313,"mtime":1611508452012,"results":"37","hashOfConfig":"32"},{"size":216,"mtime":1612254588631,"results":"38","hashOfConfig":"32"},{"size":3171,"mtime":1613054727507,"results":"39","hashOfConfig":"32"},{"size":1872,"mtime":1613464993096,"results":"40","hashOfConfig":"32"},{"size":1931,"mtime":1613560139547,"results":"41","hashOfConfig":"32"},{"size":2367,"mtime":1612883934860,"results":"42","hashOfConfig":"32"},{"size":3754,"mtime":1613463116147,"results":"43","hashOfConfig":"32"},{"size":911,"mtime":1611925989652,"results":"44","hashOfConfig":"32"},{"size":7302,"mtime":1613464063083,"results":"45","hashOfConfig":"32"},{"size":801,"mtime":1611937680104,"results":"46","hashOfConfig":"32"},{"size":2578,"mtime":1613463757728,"results":"47","hashOfConfig":"32"},{"size":8192,"mtime":1612099701381,"results":"48","hashOfConfig":"32"},{"size":710,"mtime":1611925965195,"results":"49","hashOfConfig":"32"},{"size":2149,"mtime":1612083436763,"results":"50","hashOfConfig":"32"},{"size":10954,"mtime":1613463862746,"results":"51","hashOfConfig":"32"},{"size":3233,"mtime":1611902683078,"results":"52","hashOfConfig":"32"},{"size":4750,"mtime":1613464030405,"results":"53","hashOfConfig":"32"},{"size":108,"mtime":1612031247902,"results":"54","hashOfConfig":"32"},{"size":390,"mtime":1612077501742,"results":"55","hashOfConfig":"32"},{"size":343,"mtime":1612079855162,"results":"56","hashOfConfig":"32"},{"size":11292,"mtime":1613463871979,"results":"57","hashOfConfig":"32"},{"size":13873,"mtime":1613463863878,"results":"58","hashOfConfig":"32"},{"size":1671,"mtime":1613125256290,"results":"59","hashOfConfig":"32"},{"size":5267,"mtime":1613465811731,"results":"60","hashOfConfig":"32"},{"size":5186,"mtime":1613549511148,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"8u2c1",{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"64"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\psychology\\src\\index.js",[],["141","142"],"C:\\psychology\\src\\App.js",["143","144"],"import React, {Component} from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Main from './components/main';\r\nimport Header from './components/header';\r\nimport Login from './components/login';\r\nimport Register from './components/register';\r\nimport Public_room_list from './components/public_room_list';\r\nimport Generate_room from './components/generate_room';\r\nimport Game_ready from './components/game_ready';\r\nimport Ranking from './components/ranking';\r\n\r\nimport Moving_dots from './components/moving_dots/moving_dots';\r\n\r\nimport Treasure_ship from './components/treasure_ship/treasure_ship';\r\n\r\nimport Hero from './components/hero/hero';\r\n\r\nimport Prisoner from './components/prisoner/prisoner';\r\n\r\nimport War_and_peace from './components/war_and_peace/war_and_peace';\r\n\r\nclass App extends Component{\r\n  render(){\r\n    const mobile = window.innerWidth<768;\r\n    return (\r\n        <div className=\"App\">\r\n          {this.props.game_started ? <></> : <Header/>}\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Main}/>\r\n            <Route exact path=\"/login\" component={Login}/>\r\n            <Route exact path=\"/register\" component={Register}/>\r\n            <Route exact path=\"/public_room_list\" component={Public_room_list}/>\r\n            <Route exact path=\"/generate_room\" component={Generate_room}/>\r\n            <Route exact path=\"/ranking\" component={Ranking}/>\r\n\r\n            <Route path=\"/game_ready/:roomID\" component={Game_ready}/>\r\n\r\n            <Route path=\"/moving_dots/:roomID\" component={Moving_dots}/>\r\n\r\n            <Route path=\"/treasure_ship/:roomID\" component={Treasure_ship}/>\r\n\r\n            <Route path=\"/hero/:roomID\" component={Hero}/>\r\n\r\n            <Route path=\"/prisoner/:roomID\" component={Prisoner}/>\r\n\r\n            <Route path=\"/war_and_peace/:roomID\" component={War_and_peace}/>\r\n          </Switch>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_info : state.login.user_info,\r\n    game_started : state.game.game_started,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","C:\\psychology\\src\\reducers\\index.js",[],"C:\\psychology\\src\\reducers\\login.js",[],"C:\\psychology\\src\\reducers\\admin.js",[],"C:\\psychology\\src\\actions\\ActionTypes.js",[],"C:\\psychology\\src\\root.js",[],"C:\\psychology\\src\\components\\main.js",["145","146","147","148","149","150","151","152"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport './css/main.css';\r\nimport Generate_room from './generate_room';\r\nimport Game_container from './game_container';\r\n\r\nclass Main extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      making_mode : false,\r\n      private_mode : false,\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value\r\n    });\r\n  }\r\n  onClick1 = ()=>{\r\n    this.setState({\r\n      making_mode : !this.state.making_mode,\r\n      private_mode : false,\r\n    });\r\n  }\r\n  onClick2 = ()=>{\r\n    this.setState({\r\n      making_mode : false,\r\n      private_mode : !this.state.private_mode,\r\n    });\r\n  }\r\n  onClick3 = ()=>{\r\n    fetch(`/room/id/${this.state.code}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      if(data.error) alert('코드에 해당하는 방이 존재하지 않습니다');\r\n      else {\r\n        if(data.maxNumber<=data.userNumber) alert('정원이 모두 찬 방입니다');\r\n        else this.props.history.replace(`/game_ready/${data.roomID}`);\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='main'>\r\n        <div className=\"menu\">\r\n          <button className={this.state.making_mode ? 'cancle' : ''}\r\n            onClick={this.onClick1}>\r\n            {this.state.making_mode ? '취소' : '방 만들기'}\r\n          </button>\r\n\r\n          <Link to=\"/public_room_list\">공개방 참여</Link>\r\n\r\n          <button className={this.state.private_mode ? 'cancle' : ''}\r\n            onClick={this.onClick2}>\r\n            코드로 참여\r\n          </button>\r\n\r\n          {this.state.making_mode ? <Generate_room history1={this.props.history}/> : <></>}\r\n\r\n          {this.state.private_mode ?\r\n            <div className=\"code_input\">\r\n              <input name=\"code\" onChange={this.onChange} type=\"text\" placeholder=\"private room code\"></input>\r\n              <button onClick={this.onClick3}>참여</button>\r\n            </div>\r\n          : <></>}\r\n        </div>\r\n        <div className=\"games\">\r\n          <Game_container history={this.props.history} link={\"/moving_dots\"} multiple={false} name={\"무리짓기\"} center={false}/>\r\n          <Game_container history={this.props.history} link={\"/prisoner's_dilemma\"} multiple={true} name={\"죄수의 딜레마\"} center={true}/>\r\n          <Game_container history={this.props.history} link={\"/war_and_peace\"} multiple={true} name={\"전쟁과 평화\"} center={false}/>\r\n          <Game_container history={this.props.history} link={\"/hero\"} multiple={true} name={\"외로운 영웅\"} center={false}/>\r\n          <Game_container history={this.props.history} link={\"/treasure_ship\"} multiple={true} name={\"보물선\"} center={true}/>\r\n          <Game_container history={this.props.history} link={\"/moving_dots\"} multiple={true} name={\"거꾸로 경매\"} center={false}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Main);\r\n","C:\\psychology\\src\\components\\login.js",["153"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/login.css';\r\n\r\nclass Login extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value\r\n    })\r\n  }\r\n  onClick1 = ()=>{\r\n    const post = {   //전송하려는 post obj\r\n      email:this.state.email,\r\n      password :this.state.password,\r\n    }\r\n    fetch('/auth/login',{\r\n      method :\"POST\",\r\n      headers:{\r\n        'content-type':'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body:JSON.stringify(post)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n    })\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      if(data.is_logined){\r\n        this.props.handleSuccess(data.user);\r\n        this.props.history.push('/');\r\n      }\r\n      else{\r\n        alert('잘못된 Email 또는 비밀번호 입니다.');\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='login'>\r\n        <input type=\"email\" name=\"email\" onChange={this.onChange} required placeholder=\"Email\"/>\r\n        <input type=\"password\" name=\"password\" onChange={this.onChange} required placeholder=\"Password\"/>\r\n        <button onClick={this.onClick1}>Login</button>\r\n        <Link to=\"/register\">Sign Up</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\psychology\\src\\components\\header.js",["154"],"C:\\psychology\\src\\components\\public_room_list.js",["155","156","157","158"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/public_room_list.css';\r\nimport Generate_room from './generate_room';\r\nimport Public_room from './public_room';\r\n\r\nclass Public_room_list extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      room_list : [],\r\n      name : '전체',\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    fetch('/room')\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n        this.setState({\r\n          room_list : data,\r\n        });\r\n        console.log(data);\r\n    });\r\n  }\r\n  onClick2 = e => {\r\n    this.props.history.push(`/game_ready/${e.target.name}`);\r\n  }\r\n  onClick4 = e =>{\r\n    this.setState({\r\n      name : e.target.name,\r\n    })\r\n  }\r\n  render(){\r\n    const {room_list} = this.state;\r\n    var list = [];\r\n    for (var i=0;i<room_list.length;i++){\r\n      if(this.state.name===\"전체\" || this.state.name===room_list[i].gameName){\r\n        if(room_list[i].userList.length<room_list[i].maxNumber && room_list[i].userList.length>0) list.push(<Public_room data={room_list[i]} onClick={this.onClick2}/>);\r\n      }\r\n    }\r\n    return(\r\n      <div className = 'public_room_list'>\r\n        <div className=\"game_select\">\r\n          <button className={this.state.name===\"전체\" ? \"select\" : \"\"}\r\n            name=\"전체\" onClick={this.onClick4}>전체</button>\r\n          <button className={this.state.name===\"죄수의 딜레마\" ? \"select\" : \"\"}\r\n            name=\"죄수의 딜레마\" onClick={this.onClick4}>죄수의 딜레마</button>\r\n          <button className={this.state.name===\"외로운 영웅\" ? \"select\" : \"\"}\r\n            name=\"외로운 영웅\" onClick={this.onClick4}>외로운 영웅</button>\r\n          <button className={this.state.name===\"보물선\" ? \"select\" : \"\"}\r\n            name=\"보물선\" onClick={this.onClick4}>보물선</button>\r\n          <button className={this.state.name===\"전쟁과 평화\" ? \"select\" : \"\"}\r\n            name=\"전쟁과 평화\" onClick={this.onClick4}>전쟁과 평화</button>\r\n          <button className={this.state.name===\"거꾸로 경매\" ? \"select\" : \"\"}\r\n            name=\"거꾸로 경매\" onClick={this.onClick4}>거꾸로 경매</button>\r\n        </div>\r\n        <div className=\"room_list\">\r\n          {list}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Public_room_list;\r\n","C:\\psychology\\src\\components\\generate_room.js",["159","160"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport './css/generate_room.css';\r\nimport socket from '../socket.js';\r\nconst crypto = require(\"crypto\");\r\n\r\nclass Generate_room extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isPublic : true,\r\n      name : \"죄수의 딜레마\",\r\n      max_number : 3,\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onClick1 = ()=>{\r\n    socket.emit('generate room', null);\r\n    var roomID = crypto.randomBytes(10).toString('hex');\r\n    const room = {\r\n      roomID : roomID,\r\n      isPublic : this.state.isPublic,\r\n      gameName : this.state.name,\r\n      maxNumber : (this.state.name==='죄수의 딜레마' ? 2 : this.state.max_number),\r\n      roomOwner : this.props.user_info.nickname,\r\n      userList : [{userID : this.props.user_info.nickname}],\r\n    }\r\n    fetch('/room', {\r\n        method :\"POST\",\r\n        headers:{\r\n          'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(room)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n      })\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        console.log(data);\r\n      });\r\n    this.props.history1.push(`/game_ready/${roomID}`);\r\n  }\r\n  // 1 증가\r\n  onClick2 = ()=>{\r\n    if(this.state.name!=='죄수의 딜레마' && this.state.max_number!==20){\r\n      this.setState({\r\n        max_number : this.state.max_number+1,\r\n      });\r\n    }\r\n  }\r\n  // 1 감소\r\n  onClick3 = ()=>{\r\n    if(this.state.name!=='죄수의 딜레마' && this.state.max_number!==3){\r\n      this.setState({\r\n        max_number : this.state.max_number-1,\r\n      })\r\n    }\r\n  }\r\n  onClick4 = e=>{\r\n    this.setState({\r\n      name : e.target.name,\r\n    });\r\n  }\r\n  onClick5 = value =>{\r\n    this.setState({\r\n      isPublic : value,\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='generate_room'>\r\n        <div className=\"game_select\">\r\n          <button className={this.state.name===\"죄수의 딜레마\" ? \"select\" : \"\"}\r\n            name=\"죄수의 딜레마\" onClick={this.onClick4}>죄수의 딜레마</button>\r\n          <button className={this.state.name===\"외로운 영웅\" ? \"select\" : \"\"}\r\n            name=\"외로운 영웅\" onClick={this.onClick4}>외로운 영웅</button>\r\n          <button className={this.state.name===\"보물선\" ? \"select\" : \"\"}\r\n            name=\"보물선\" onClick={this.onClick4}>보물선</button>\r\n          <button className={this.state.name===\"전쟁과 평화\" ? \"select\" : \"\"}\r\n            name=\"전쟁과 평화\" onClick={this.onClick4}>전쟁과 평화</button>\r\n          <button className={this.state.name===\"거꾸로 경매\" ? \"select\" : \"\"}\r\n            name=\"거꾸로 경매\" onClick={this.onClick4}>거꾸로 경매</button>\r\n        </div>\r\n        <div className=\"max_select\">\r\n          <button className=\"circle\" onClick={this.onClick3}>-</button>\r\n          <button>{this.state.name==='죄수의 딜레마' ? \"2인\" : this.state.max_number+'인'}</button>\r\n          <button className=\"circle\" onClick={this.onClick2}>+</button>\r\n          <button className={this.state.isPublic ? \"select\" : \"\"} onClick={()=>this.onClick5(true)}>공개</button>\r\n          <button className={this.state.isPublic ? \"\" : \"select\"} onClick={()=>this.onClick5(false)}>비공개</button>\r\n          <button onClick={this.onClick1}>방 생성</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Generate_room);\r\n","C:\\psychology\\src\\actions\\index.js",[],"C:\\psychology\\src\\components\\game_ready.js",["161","162","163","164","165","166"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/game_ready.css';\r\nimport socket from '../socket.js';\r\nconst moment = require('moment-timezone');\r\n\r\nclass Game_ready extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      user_list : [],\r\n      chat_list : [],\r\n      game_name : '',\r\n      max_number : '',\r\n      roomOwner : false,\r\n    }\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const roomID = this.props.match.params.roomID;\r\n\r\n    // alert someone joined room\r\n    setTimeout(()=>{\r\n      socket.emit('join room', {\r\n          roomID : roomID,\r\n          userID : this.props.user_info.nickname,\r\n      });\r\n    }, 500);\r\n\r\n    // new user entered\r\n    socket.on('new user', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push({isAlert : true, userID : '', message : `${data.userID}님이 입장했습니다.`, time : Date.now()});\r\n\r\n      fetch(`/room/id/${roomID}`)\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        this.setState({\r\n          game_name : data.gameName,\r\n          max_number : data.maxNumber,\r\n          roomOwner : data.roomOwner,\r\n          user_list : data.userList,\r\n          chat_list : _chatlist,\r\n        });\r\n      });\r\n    });\r\n\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n\r\n    socket.on('delete user', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push({isAlert : true, userID : '', message : `${data.userID}님이 방을 나가셨습니다.`});\r\n      fetch(`/room/id/${roomID}`)\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        this.setState({\r\n          user_list : data.userList,\r\n          chat_list : _chatlist,\r\n        });\r\n      });\r\n    });\r\n\r\n    socket.on('game start', (data)=>{\r\n      this.gameStart();\r\n    });\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n    }\r\n    document.getElementById('chat').value = null;\r\n    this.setState({chatting : null});\r\n  }\r\n  onClick2 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.history.push('/public_room_list');\r\n  }\r\n  // start game\r\n  onClick3 = e=>{\r\n    socket.emit('game start', {roomID : this.props.match.params.roomID, gameName : this.state.game_name});\r\n  }\r\n  onClick4 = e=>{\r\n    e.preventDefault();\r\n    const el = document.createElement('textarea');\r\n    el.value = this.props.match.params.roomID;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n  }\r\n  gameStart = ()=>{\r\n    this.props.gameStart(this.state.game_name, this.props.match.params.roomID, this.state.user_list);\r\n    switch(this.state.game_name){\r\n      case '외로운 영웅' :\r\n        this.props.history.replace(`/hero/${this.props.match.params.roomID}`);\r\n        break;\r\n      case '보물선' :\r\n        this.props.history.replace(`/treasure_ship/${this.props.match.params.roomID}`);\r\n        break;\r\n      case '죄수의 딜레마' :\r\n        this.props.history.replace(`/prisoner/${this.props.match.params.roomID}`);\r\n        break;\r\n      case '전쟁과 평화' :\r\n        this.props.history.replace(`/war_and_peace/${this.props.match.params.roomID}`);\r\n      default :\r\n        break;\r\n    }\r\n  }\r\n  render(){\r\n    const {user_list, chat_list} = this.state;\r\n    var users = [];\r\n    if(user_list){\r\n      for(var i=0;i<user_list.length;i++){\r\n        users.push(\r\n          <div>{user_list[i].userID}</div>\r\n        )\r\n      }\r\n    }\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    const isOwner = this.state.roomOwner == this.props.user_info.nickname;\r\n    return(\r\n      <div className = 'game_ready'>\r\n        <div className=\"row1\">\r\n          <div className=\"dummy1\"></div>\r\n          <div className=\"info\">\r\n            <span>대기실</span>\r\n            <span>{this.state.game_name}</span>\r\n            <button onClick={this.onClick4}>입장 코드 복사</button>\r\n            <span>{user_list.length}/{this.state.max_number}인</span>\r\n          </div>\r\n          <div className=\"dummy2\"></div>\r\n        </div>\r\n        <div className=\"row2\">\r\n          <div className=\"user_container\">\r\n           <div>참여자 목록</div>\r\n           {users}\r\n          </div>\r\n          <div className=\"chatting_container\">\r\n            <div className=\"chatting\">\r\n              {chat}\r\n            </div>\r\n            <div className=\"chatting_input\">\r\n              <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n              <button className={this.state.chatting ? \"active\" : \"nonactivate\"} type=\"submit\" onClick={this.onClick1}>전송</button>\r\n            </div>\r\n            <div className=\"button_container\">\r\n              '나가기' 버튼을 눌러야 정상적으로 퇴장처리가 됩니다.\r\n              <button onClick={this.onClick2}>나가기</button>\r\n              {isOwner ? <button onClick={this.onClick3}>게임 시작</button> : <></>}\r\n            </div>\r\n          </div>\r\n          <div className=\"dummy\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameStart : (name, roomID, user_list)=>{dispatch(actions.game_started(name, roomID, user_list))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game_ready);\r\n","C:\\psychology\\src\\components\\public_room.js",["167","168","169"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/public_room.css';\r\n\r\nclass Public_room extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {data, onClick} = this.props;\r\n    return(\r\n      <div className=\"public_room\">\r\n        <div>\r\n          <img src=\"./assets/2.jpg\"/>\r\n          <div>\r\n            <span className=\"name\">{data.gameName}</span>\r\n            <span className=\"number\">{data.userList.length}/{data.maxNumber}명</span>\r\n            <br/>\r\n            <span>그 외 세부정보</span>\r\n          </div>\r\n        </div>\r\n        <button name={data.roomID}\r\n        onClick={onClick}>참가</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Public_room;\r\n","C:\\psychology\\src\\components\\game_container.js",["170","171","172"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport './css/game_container.css';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport socket from '../socket.js';\r\nconst crypto = require(\"crypto\");\r\n\r\nclass Game_container extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onClick = e=>{\r\n    // if it is solo player game\r\n    if(!this.props.multiple){\r\n      this.props.gameStart(this.props.name);\r\n      this.props.history.push(this.props.link+'/solo');\r\n    }\r\n    // else if it is multiplayer game\r\n    else {\r\n      fetch(`/room/max/${this.props.name}`)\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        // if room doesn't exist, generate new room\r\n        if(!data){\r\n          socket.emit('generate room', null);\r\n          var roomID = crypto.randomBytes(10).toString('hex');\r\n          const room = {\r\n            roomID : roomID,\r\n            isPublic : true,\r\n            gameName : this.props.name,\r\n            maxNumber : 5,   // default : 5\r\n            roomOwner : this.props.user_info.nickname,\r\n            userList : [{userID : this.props.user_info.nickname}],\r\n          }\r\n          fetch('/room', {\r\n              method :\"POST\",\r\n              headers:{\r\n                'content-type':'application/json'\r\n              },\r\n              body:JSON.stringify(room)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n            })\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n              console.log(data);\r\n            });\r\n          this.props.history.push(`/game_ready/${roomID}`);\r\n        }\r\n        // if room exist\r\n        else{\r\n          this.props.history.push(`/game_ready/${data.roomID}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className={'game_container'+(this.props.center ? ' center' : '')}>\r\n        <img src=\"./assets/2.jpg\"/>\r\n        <div className=\"status\">{this.props.name}</div>\r\n        <div>\r\n          <button onClick={this.onClick}>빠른 시작</button>\r\n          <button>게임 방법</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameStart : (name)=>{dispatch(actions.game_started(name, null, null))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game_container);\r\n","C:\\psychology\\src\\components\\moving_dots\\moving_dots.js",["173","174","175","176","177","178","179","180","181","182","183"],"import React, {createRef, useEffect, useState, Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport Timer from '../common/timer';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport '../css/moving_dots.css';\r\n\r\nfunction Moving_dots(props){\r\n  let canvas;\r\n  let canvasRef = createRef();\r\n  const height = 950;\r\n  const width = 1800;\r\n  let pos = {\r\n    drawable : false,\r\n    X : Math.random()*width,\r\n    Y : Math.random()*height,\r\n  };\r\n  let origin = {\r\n    X : Math.random()*width,\r\n    Y : Math.random()*height,\r\n  };\r\n  let ctx;\r\n\r\n  //------------game status---------------------//\r\n  // game state : ready, timerRun, updateDots, showCluster, gameResult\r\n  let gameState = \"ready\";\r\n  // decide whether dots should be shown\r\n  let showDots = false;\r\n  // which round it is : 0~8\r\n  let round = 0;\r\n  // distance which dots will move\r\n  let length = [100, 120, 140, 200, 250, 200, 140, 120, 100];\r\n  // whether timer should run\r\n  const [timer, setTimer] = useState(false);\r\n  // define works after 10 sec\r\n  let timer1;\r\n  // define background messages\r\n  let backgroundMsg;\r\n  // set other dots' positions {X : .., Y : ..}\r\n  let positions = [];\r\n\r\n  useEffect(()=>{\r\n    // use full screen\r\n    window.document.documentElement.requestFullscreen();\r\n    //---------initialize----------------------------//\r\n    // canvas initialize\r\n    canvas = canvasRef.current;\r\n    ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"#384050\";\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n    // draw background text\r\n    backgroundMsg = \"Ready\";\r\n    setBackgroundMsg(backgroundMsg);\r\n    // draw positions of other Moving_dots\r\n    setPositions();\r\n    //---------initialize done----------------------------//\r\n    // countDown\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"3\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 1000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"2\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 2000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"1\";\r\n      setBackgroundMsg(backgroundMsg);\r\n    }, 3000);\r\n    setTimeout(()=>{\r\n      clearCanvas();\r\n      backgroundMsg = \"Round 1\";\r\n      setBackgroundMsg(backgroundMsg);\r\n      drawDots();\r\n      showDots = true;\r\n      setTimer(true);\r\n      gameState = \"timerRun\";\r\n    }, 4000);\r\n    timer1 = setTimeout(()=>{\r\n      var e = {offsetX : Math.random()*width, offsetY : Math.random()*height};\r\n      initDraw(e);\r\n    }, 14000);\r\n    // evenlistener\r\n    canvas.addEventListener(\"mousedown\", initDraw);\r\n    canvas.addEventListener(\"mousemove\", draw);\r\n  }, []);\r\n\r\n  function setBackgroundMsg(msg){\r\n    // draw background text\r\n    ctx.beginPath();\r\n    ctx.textAlign = \"center\";\r\n    ctx.font = \"150px Arial\";\r\n    ctx.fillStyle = \"rgba(112, 112, 112, 1)\";\r\n    ctx.fillText(msg, width/2, height/2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  function initDraw(e){\r\n    if(gameState===\"timerRun\"){\r\n      // game is end\r\n      if(round===8){\r\n        // set new origin\r\n        pos = {...pos, ...getPosition(e)};\r\n        const d_x = pos.X-origin.X;\r\n        const d_y = pos.Y-origin.Y;\r\n        const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n        const len_x = length[round]*d_x/_r;\r\n        const len_y = length[round]*d_y/_r;\r\n        var end_x = len_x+origin.X;\r\n        var end_y = len_y+origin.Y;\r\n        if(end_x<0) end_x = width+end_x;\r\n        if(end_x>width) end_x = end_x-width;\r\n        if(end_y<0) end_y = height+end_y;\r\n        if(end_y>height) end_y = end_y-height;\r\n        origin = {X : end_x, Y : end_y};\r\n        //--------------------- game status update ----------------------//\r\n        gameState = \"gameResult\";\r\n        // timer stop\r\n        setTimer(false);\r\n        // canvas update\r\n        backgroundMsg = \"Game End\";\r\n        draw(e);\r\n      }\r\n      // round is not yet 9\r\n      else{\r\n        // set new origin\r\n        pos = {...pos, ...getPosition(e)};\r\n        const d_x = pos.X-origin.X;\r\n        const d_y = pos.Y-origin.Y;\r\n        const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n        const len_x = length[round]*d_x/_r;\r\n        const len_y = length[round]*d_y/_r;\r\n        var end_x = len_x+origin.X;\r\n        var end_y = len_y+origin.Y;\r\n        if(end_x<0) end_x = width+end_x;\r\n        if(end_x>width) end_x = end_x-width;\r\n        if(end_y<0) end_y = height+end_y;\r\n        if(end_y>height) end_y = end_y-height;\r\n        origin = {X : end_x, Y : end_y};\r\n        //--------------------- game status update ----------------------//\r\n        gameState = \"updateDots\";\r\n        // timer stop\r\n        setTimer(false);\r\n        // round ++\r\n        round++;\r\n        // canvas update\r\n        backgroundMsg = \"moving dots\";\r\n        draw(e);\r\n\r\n        // after 1sec, update dots position and canvas\r\n        setTimeout(()=>{\r\n          updatePositions();\r\n          draw(e);\r\n\r\n        }, 1000);\r\n\r\n        // after 2 sec, new round start\r\n        setTimeout(()=>{\r\n          gameState= \"timerRun\";\r\n          backgroundMsg = \"Round \"+(round+1);\r\n          draw(e);\r\n          setTimer(true);\r\n        }, 2000);\r\n\r\n        // after 10sec initDraw\r\n        clearInterval(timer1);\r\n        timer1 = setTimeout(()=>{\r\n          var e = {offsetX : Math.random()*width, offsetY : Math.random()*height};\r\n          initDraw(e);\r\n        }, 12000);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setPositions(){\r\n    for(var i=0;i<20;i++){\r\n      positions.push({X : Math.random()*width, Y : Math.random()*height});\r\n    }\r\n  }\r\n\r\n  function updatePositions(){\r\n    for(var i=0;i<20;i++){\r\n      positions[i].X = positions[i].X+(2*Math.random()-1)*length[round];\r\n      positions[i].Y = positions[i].Y+(2*Math.random()-1)*length[round];\r\n    }\r\n  }\r\n\r\n  function drawDots(){\r\n    for(var i=0;i<20;i++){\r\n      ctx.beginPath();\r\n      ctx.arc(positions[i].X, positions[i].Y, 10, 0, 2*Math.PI, true);\r\n      ctx.fillStyle=\"#FFCF24\";\r\n      ctx.fill();\r\n    }\r\n  }\r\n\r\n  function draw(e){\r\n    // claer canvas\r\n    clearCanvas();\r\n    // draw background text\r\n    setBackgroundMsg(backgroundMsg);\r\n    // draw other dots\r\n    if(showDots) drawDots();\r\n    // draw mydot\r\n    ctx.beginPath();\r\n    ctx.arc(origin.X, origin.Y, 10, 0, 2*Math.PI, true);\r\n    ctx.fillStyle=\"#56AEFF\";\r\n    ctx.fill();\r\n    // draw support line\r\n    drawSupportLine(origin, getPosition(e));\r\n  }\r\n\r\n  function getPosition(e){\r\n    return {X: e.offsetX, Y: e.offsetY};\r\n  }\r\n\r\n  function clearCanvas(){\r\n    // canvas reset\r\n    ctx.clearRect(0,0,canvas.width, canvas.height);\r\n    ctx.fillStyle = \"#384050\";\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n  }\r\n\r\n  function drawSupportLine(_origin, _pos){\r\n    // draw line to origin to pos\r\n    //ctx.beginPath();\r\n    //ctx.moveTo(_origin.X, _origin.Y);\r\n    const d_x = _pos.X-_origin.X;\r\n    const d_y = _pos.Y-_origin.Y;\r\n    const _r = Math.sqrt(d_x*d_x+d_y*d_y);\r\n    const len_x = length[round]*d_x/_r;\r\n    const len_y = length[round]*d_y/_r;\r\n    var end_x = len_x+_origin.X;\r\n    var end_y = len_y+_origin.Y;\r\n    if(end_x<0) end_x = width+end_x;\r\n    if(end_x>width) end_x = end_x-width;\r\n    if(end_y<0) end_y = height+end_y;\r\n    if(end_y>height) end_y = end_y-height;\r\n    //ctx.lineTo(end_x, end_y);\r\n    //ctx.stroke();\r\n    // draw circle at pos\r\n    ctx.beginPath();\r\n    ctx.arc(end_x, end_y, 10, 0, 2*Math.PI, true);\r\n    ctx.fillStyle=\"rgba(86, 174, 255, 0.5)\";\r\n    ctx.fill();\r\n  }\r\n\r\n  function onClick1(){\r\n    props.gameEnd();\r\n    props.history.push('/');\r\n  }\r\n\r\n  return(\r\n    <div className=\"moving_dots\">\r\n      <Timer gameEnd={()=>{}} start={timer} time={10000} width={width} height={20} color=\"#FFCF24\"/>\r\n      <canvas ref={canvasRef} width={width} height={height}/>\r\n      <button onClick={onClick1}>게임 포기</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Moving_dots);\r\n","C:\\psychology\\src\\reducers\\game.js",[],"C:\\psychology\\src\\components\\common\\timer.js",["184","185","186","187"],"import React, {createRef, useEffect, Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nclass Timer extends Component{\r\n  constructor(props) {\r\n      super(props);\r\n      this.canvasRef = React.createRef();\r\n      this.timer = 0;\r\n      this.state = {\r\n        count : 0,\r\n      };\r\n    }\r\n  componentDidMount = ()=>{\r\n    var canvas = this.canvasRef.current;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = this.props.color;\r\n    ctx.fillRect(0,0,canvas.width, canvas.height);\r\n    if(this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n    }\r\n  }\r\n  componentWillReceiveProps = (nextProps)=>{\r\n\r\n    if(nextProps.start && !this.props.start) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.draw, 10);\r\n      this.setState({count : 0});\r\n    }\r\n  }\r\n  componentWillUnmount = ()=>{\r\n    clearInterval(this.timer);\r\n  }\r\n  draw = ()=>{\r\n    var canvas = this.canvasRef.current;\r\n    if(canvas){\r\n      var ctx = canvas.getContext('2d');\r\n\r\n      // count time\r\n      this.setState({\r\n        count : this.state.count+1,\r\n      });\r\n\r\n      // check timer is done\r\n      var ratio = this.state.count*10/this.props.time;\r\n      if(ratio>=1) {\r\n        clearInterval(this.timer);\r\n        this.setState({count : 0});\r\n        ctx.fillStyle = this.props.color;\r\n        ctx.fillRect(0,0,canvas.width, canvas.height);\r\n        this.props.gameEnd();\r\n      }\r\n\r\n      // time bar update\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.fillStyle = this.props.color;\r\n      ctx.fillRect(0,0,canvas.width*(1-ratio), canvas.height);\r\n\r\n      // check it's stopped\r\n      if(!this.props.start){\r\n        clearInterval(this.timer);\r\n        this.setState({count : 0});\r\n        ctx.fillStyle = this.props.color;\r\n        ctx.fillRect(0,0,canvas.width, canvas.height);\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <>\r\n        <canvas ref={this.canvasRef} width={this.props.width} height={this.props.height}/>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Timer;\r\n","C:\\psychology\\src\\components\\treasure_ship\\treasure_ship.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport '../css/treasure_ship.css';\r\nimport socket from '../../socket.js';\r\nimport src1 from './assets/ship1.png';\r\nimport src2 from './assets/ship2.png';\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Treasure_ship extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      user_list : [],\r\n      on_board_user : [],\r\n      left_user : [],\r\n      choice : '',  // on_board / left\r\n      gold : [1000, 2000, 3000, 4000, 5000],\r\n      user_gold : new Map(),  // {{user1=>gold1}, {user2=>gold2}, ...}\r\n      on_board_gold : 0,\r\n      left_gold : 0,\r\n      ranking : 1, // 1 ~ user.length\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      //  initialize user gold by 0\r\n      var userGold = new Map();\r\n      for(var i=0;i<data.userList.length;i++){\r\n          userGold.set(data.userList[i].userID, 0);\r\n      }\r\n      //userGold = Array.from(userGold);\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        user_gold : userGold,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      this.setState({\r\n        step : 1,\r\n        timer : true,\r\n      });\r\n    });\r\n    // time end\r\n    socket.on('time end', (data)=>{\r\n      console.log('time end');\r\n      this.setState({\r\n        step : 2,\r\n        timer : false,\r\n      });\r\n      // send choie info to server\r\n      socket.emit('choice', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        choice : (this.state.choice ? this.state.choice : 'left')\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      // winner decision\r\n      var _winner = this.whoIsWinner(this.state.on_board_user.length, this.state.left_user.length);\r\n      // point reward decision\r\n      var user_gold = this.state.user_gold;\r\n      var _gold1, _gold2;\r\n      if(_winner==='on_board') {\r\n        _gold1 = this.state.gold[this.state.round-1]/(this.state.on_board_user.length);\r\n        _gold2 = 0;\r\n      } else {\r\n        _gold1 = this.state.gold[this.state.round-1]*(-0.05);\r\n        _gold2 = this.state.gold[this.state.round-1]*0.5/(this.state.left_user.length);\r\n      }\r\n      // give reward\r\n      for(var i=0;i<this.state.on_board_user.length;i++){\r\n        var _gold = user_gold.get(this.state.on_board_user[i]);\r\n        _gold += _gold1;\r\n        user_gold.set(this.state.on_board_user[i], _gold);\r\n      }\r\n      for(var i=0;i<this.state.left_user.length;i++){\r\n        var _gold = user_gold.get(this.state.left_user[i]);\r\n        _gold += _gold2;\r\n        user_gold.set(this.state.left_user[i], _gold);\r\n      }\r\n      user_gold = new Map([...user_gold.entries()].sort((a,b)=>b[1]-a[1]));\r\n      var cnt = 1;\r\n      user_gold.forEach((value, key)=>{\r\n        if(key===this.props.user_info.nickname) {\r\n          this.setState({ranking : cnt});\r\n        }\r\n        cnt++;\r\n      });\r\n      // change state\r\n      this.setState({\r\n        on_board_gold : _gold1,\r\n        left_gold : _gold2,\r\n        user_gold : user_gold,\r\n        step : 3,\r\n        winner : _winner,\r\n      });\r\n\r\n    });\r\n    // end round\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        on_board_user : [],\r\n        left_user : [],\r\n        choice : '',\r\n        winner : '',\r\n      });\r\n      // start new round\r\n      if(this.state.round!==6 &&\r\n        this.props.user_info.nickname===this.state.room_owner){\r\n        socket.emit('game start', {roomID : this.state.roomID, gameName : this.state.game_name});\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // get other user's choice\r\n    socket.on('choice', (data)=>{\r\n      if(data.choice==='on_board'){\r\n        var on_board = this.state.on_board_user;\r\n        on_board.push(data.userID);\r\n        this.setState({\r\n          on_board_user : on_board,\r\n        });\r\n      }\r\n      else {\r\n        var left = this.state.left_user;\r\n        left.push(data.userID);\r\n        this.setState({\r\n          left_user : left,\r\n        });\r\n      }\r\n    })\r\n  }\r\n  // n : on_board, m : left,\r\n  whoIsWinner = (n, m)=>{\r\n    switch(n+m){\r\n      case 3:\r\n        if(n<=1) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 4:\r\n        if(n<=2) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 5:\r\n        if(n<=2) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 6:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 7:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      case 8:\r\n        if(n<=3) return 'on_board';\r\n        else return 'left';\r\n        break;\r\n      default:\r\n        return 'on_board';\r\n        break;\r\n    }\r\n  }\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // choice\r\n  onClick2 = value=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        choice : value,\r\n      });\r\n    }\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){\r\n    const {chat_list, on_board_user, left_user, winner, user_gold} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // on_board list\r\n    var on_board = [];\r\n    for(var i=0;i<on_board_user.length;i++){\r\n      on_board.push(<span>{on_board_user[i]}</span>);\r\n    }\r\n    // left list\r\n    var left = [];\r\n    for(var i=0;i<left_user.length;i++){\r\n      left.push(<span>{left_user[i]}</span>);\r\n    }\r\n    // user gold leader board\r\n    var leader_board = [];\r\n    var cnt = 1;\r\n    user_gold.forEach((value, key)=>{\r\n      leader_board.push(<span>{cnt}. {key} - {value}G</span>);\r\n      cnt++;\r\n    });\r\n    return(\r\n      <div className='treasure_ship'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={20000} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>#{this.state.ranking}</span>\r\n            <span>{this.state.user_gold.get(this.props.user_info.nickname)}G</span>\r\n            <span>ROUND {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n\r\n            <div className=\"ship\">\r\n              <img src={src1}/>\r\n              <div>{this.state.gold[this.state.round-1]}G</div>\r\n              <button className={this.state.choice==='on_board' ? 'select' : ''} onClick={()=>{this.onClick2('on_board');}}>탑승</button>\r\n              <button className={this.state.choice==='left' ? 'select' : ''} onClick={()=>{this.onClick2('left');}}>잔류</button>\r\n            </div>\r\n\r\n            <div className=\"result\">\r\n              <div className={(winner ? (winner==='on_board' ? 'winner' : '') : '')}>\r\n                <label>탑승</label>\r\n                <br/>\r\n                {on_board}\r\n              </div>\r\n              <div className={(winner ? (winner==='left' ? 'winner' : '') : '')}>\r\n                <label>잔류</label>\r\n                <br/>\r\n                {left}\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"leader_board\">\r\n            {leader_board}\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Treasure_ship);\r\n","C:\\psychology\\src\\components\\treasure_ship\\ship_wreck.js",["204","205"],"/* Babylon JS is available as **npm** package.\r\nYou can easily build a simple `React` Component around a `canvas` and Babylon JS\r\nI have created a minimal example with React+ Babylon:\r\n */\r\nimport React, { Component } from \"react\";\r\nimport * as BABYLON from '@babylonjs/core/Legacy/legacy';\r\nimport 'babylonjs-loaders';\r\n\r\nvar scene;\r\nvar car;\r\n/**\r\n * Example temnplate of using Babylon JS with React\r\n */\r\nclass Ship_wreck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { useWireFrame: false, shouldAnimate: false };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // start ENGINE\r\n    this.engine = new BABYLON.Engine(this.canvas, true, {doNotHandleContextLost: true});\r\n\r\n    this.engine.enableOfflineSupport = false;\r\n\r\n\r\n    BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () {\r\n      //alert('fuck');\r\n    }\r\n    //Create Scene\r\n    scene = new BABYLON.Scene(this.engine);\r\n\r\n    scene.clearCachedVertexData();\r\n\r\n    scene.cleanCachedTextureBuffer();\r\n\r\n    //--background settting---\r\n    this.setBackground();\r\n\r\n    //--Light---\r\n    this.addLight();\r\n\r\n    //--Camera---\r\n    this.addCamera();\r\n\r\n    //--Meshes---\r\n    this.addModels();\r\n\r\n    // Add Events\r\n    window.addEventListener(\"resize\", this.onWindowResize, false);\r\n\r\n    // Render Loop\r\n    this.engine.runRenderLoop(() => {\r\n      scene.render();\r\n    });\r\n\r\n    //Animation\r\n    scene.registerBeforeRender(() => {\r\n\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\r\n  }\r\n\r\n  onWindowResize = event => {\r\n    this.engine.resize();\r\n  };\r\n\r\n  setBackground = ()=>{\r\n    scene.clearColor = new BABYLON.Color3(34/256, 43/256, 61/256);\r\n  }\r\n\r\n  /**\r\n   * Add Lights\r\n   */\r\n  addLight = () => {\r\n    //---------- LIGHT---------------------\r\n    // Create a basic light, aiming 0,1,0 - meaning, to the sky.\r\n    var light = new BABYLON.HemisphericLight(\r\n      \"light1\",\r\n      new BABYLON.Vector3(0, 10, 0),\r\n      scene\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Add Camera\r\n   */\r\n  addCamera = () => {\r\n    // ---------------ArcRotateCamera or Orbit Control----------\r\n    var camera = new BABYLON.ArcRotateCamera(\r\n      \"Camera\",\r\n      Math.PI / 2,\r\n      Math.PI / 4,\r\n      4,\r\n      BABYLON.Vector3.Zero(),\r\n      scene\r\n    );\r\n    camera.inertia = 0;\r\n    camera.angularSensibilityX = 250;\r\n    camera.angularSensibilityY = 250;\r\n\r\n    // This attaches the camera to the canvas\r\n    camera.attachControl(this.canvas, true);\r\n    camera.setPosition(new BABYLON.Vector3(5, 5, 5));\r\n  };\r\n\r\n\r\n  /**\r\n   * Add Models\r\n   */\r\n  addModels = () => {\r\n    // Add BOX\r\n\r\n    car = BABYLON.SceneLoader.Append(\"./assets/OBJ/\", \"ship_light.obj\", scene, function(scene){\r\n      for(var i=0;i<scene.meshes.length;i++){\r\n        scene.meshes[i].scaling = scene.meshes[i].scaling.multiply(new BABYLON.Vector3(0.06, 0.06, 0.06));\r\n        scene.meshes[i].position.y += -1;\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <canvas className=\"ship_wreck\"\r\n        style={{ width: this.props.width, height: this.props.height }}\r\n        ref={canvas => {\r\n          this.canvas = canvas;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Ship_wreck;\r\n",["206","207"],"C:\\psychology\\src\\components\\hero\\hero.js",["208","209","210","211"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport '../css/hero.css';\r\nimport Timer from '../common/timer';\r\nimport Fame from './fame';\r\nimport No_more_hero from './no_more_hero';\r\nimport socket from '../../socket.js';\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Hero extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      timer_run : true,\r\n      chat_list : [],\r\n    }\r\n  }\r\n\r\n  componentDidMount = ()=>{\r\n     socket.on('new message', (data)=>{\r\n       var _chatlist = this.state.chat_list;\r\n       _chatlist.push(data);\r\n       this.setState({\r\n         chat_list : _chatlist,\r\n       });\r\n       var target = document.getElementsByClassName('chatting')[0];\r\n       this.makeScrollTop();\r\n     });\r\n\r\n     socket.on('hero appear', (data)=>{\r\n       if(!this.state.hero){\r\n         this.setState({\r\n           hero : data.userID\r\n         });\r\n       }\r\n     });\r\n  }\r\n\r\n  // after 10sec, game ends\r\n  gameEnd = ()=>{\r\n    this.setState({\r\n      timer_run : false,\r\n    });\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // hero appeared\r\n  onClick2 = e=>{\r\n    socket.emit('hero appear', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return(\r\n      <div className='hero'>\r\n        <div className=\"row1\">\r\n        {this.state.hero\r\n          ?\r\n            <>\r\n              <Fame hero={this.state.hero}/>\r\n              <button className=\"exit\" onClick={this.onClick3}>나가기</button>\r\n            </>\r\n          :\r\n          (this.state.timer_run\r\n           ?\r\n             <>\r\n               <Timer gameEnd={this.gameEnd} start={true} width={1000} time={10000} height={20} color=\"#56AEFF\"/>\r\n               <div className=\"hero_button\">\r\n                 <button onClick={this.onClick2}>영웅 출현</button>\r\n               </div>\r\n             </>\r\n           :\r\n            <>\r\n              <No_more_hero/>\r\n              <button className=\"exit\" onClick={this.onClick3}>나가기</button>\r\n            </>\r\n          )\r\n        }\r\n        </div>\r\n        <div className=\"row2\">\r\n          <div className=\"chatting\">\r\n            {chat}\r\n          </div>\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hero);\r\n","C:\\psychology\\src\\socket.js",[],"C:\\psychology\\src\\components\\hero\\fame.js",[],"C:\\psychology\\src\\components\\hero\\no_more_hero.js",[],"C:\\psychology\\src\\components\\prisoner\\prisoner.js",["212","213","214","215","216","217"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport socket from '../../socket.js';\r\nimport '../css/prisoner.css';\r\n\r\n\r\nconst moment = require('moment-timezone');\r\n\r\nclass Prisoner extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      user_list : [],\r\n      opponent_name : '',\r\n      my_sentence : 0,\r\n      opponent_sentence : 0,\r\n      my_choice : 'unknown', // confession, silence\r\n      opponent_choice : 'unknown',\r\n      my_emoji : 0,\r\n      opponent_emoji : 0, // 0~9\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      var opponent_name;\r\n      if(data.userList[0].userID===this.props.user_info.nickname){\r\n        opponent_name = data.userList[1].userID;\r\n      } else {\r\n        opponent_name = data.userList[0].userID;\r\n      }\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        opponent_name : opponent_name,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      this.setState({\r\n        step : 1,\r\n        timer : true,\r\n      })\r\n    });\r\n    // time end\r\n    socket.on('time end', (data)=>{\r\n      console.log('time end');\r\n      this.setState({\r\n        step : 2,\r\n        timer : false,\r\n      });\r\n      // send choice info to server\r\n      socket.emit('choice', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        choice : (this.state.my_choice === 'unknown') ? 'silence' : this.state.my_choice,\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      // sentence decision\r\n      var _my_sentence, _opponent_sentence;\r\n      var my_choice = this.state.my_choice === 'confession';\r\n      var opponent_choice = this.state.opponent_choice === 'confession';\r\n      if(my_choice && opponent_choice) {\r\n        _my_sentence = 3;\r\n        _opponent_sentence = 3;\r\n      } else if (my_choice && !opponent_choice){\r\n        _my_sentence = 0;\r\n        _opponent_sentence = 4;\r\n      } else if (!my_choice && opponent_choice){\r\n        _my_sentence = 4;\r\n        _opponent_sentence = 0;\r\n      } else {\r\n        _my_sentence = 1;\r\n        _opponent_sentence = 1;\r\n      }\r\n      // state update\r\n      this.setState({\r\n        step : 3,\r\n        my_sentence : this.state.my_sentence+_my_sentence,\r\n        opponent_sentence : this.state.opponent_sentence+_opponent_sentence,\r\n      });\r\n    });\r\n    // end round\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      // start new round\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        my_choice : 'unknown',\r\n        opponent_choice : 'unknown',\r\n      });\r\n      if(this.state.round!==6 && this.state.room_owner===this.props.user_info.nickname){\r\n        socket.emit('game start', {roomID : this.state.roomID, gameName : this.state.game_name});\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // get other user's choice\r\n    socket.on('choice', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname) this.setState({opponent_choice : data.choice});\r\n      console.log(data.choice);\r\n    });\r\n    // get emoji change\r\n    socket.on('emoji change', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname) this.setState({opponent_emoji : data.emoji});\r\n    });\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n  // choice\r\n  onClick2 = value=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        choice : value,\r\n      });\r\n    }\r\n  }\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  onClick4 = (choice)=>{\r\n    if(this.state.step===1){\r\n      this.setState({\r\n        my_choice : choice,\r\n      });\r\n    }\r\n  }\r\n  onClick5 = emoji =>{\r\n    this.setState({\r\n      my_emoji : emoji\r\n    });\r\n    socket.emit('emoji change', {\r\n      roomID : this.state.roomID,\r\n      userID : this.props.user_info.nickname,\r\n      emoji : emoji,\r\n    });\r\n  }\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n    }\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    var my_choice, opponent_choice;\r\n    switch(this.state.my_choice){\r\n      case 'unknown':\r\n        my_choice = '🤔';\r\n        break;\r\n      case 'confession':\r\n        my_choice = '🙏';\r\n        break;\r\n      case 'silence':\r\n        my_choice = '💬';\r\n        break;\r\n    }\r\n    switch(this.state.opponent_choice){\r\n      case 'unknown':\r\n        opponent_choice = '🤔';\r\n        break;\r\n      case 'confession':\r\n        opponent_choice = '🙏';\r\n        break;\r\n      case 'silence':\r\n        opponent_choice = '💬';\r\n        break;\r\n    }\r\n    var my_emoji = this.emoji_select(this.state.my_emoji);\r\n    var opponent_emoji = this.emoji_select(this.state.opponent_emoji);\r\n\r\n    return(\r\n      <div className='prisoner'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={10000} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>Round {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n\r\n            <div className=\"prison\">\r\n              <div>\r\n                <div className=\"sentence\">\r\n                  🕓 : {this.state.my_sentence}년\r\n                </div>\r\n                <div className=\"emoji\">\r\n                  {my_emoji}\r\n                </div>\r\n                <div className=\"decision\">\r\n                  {my_choice}\r\n                </div>\r\n                <label>{this.props.user_info.nickname}</label>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"sentence\">\r\n                  🕓 : {this.state.opponent_sentence}년\r\n                </div>\r\n                <div className=\"emoji\">\r\n                  {opponent_emoji}\r\n                </div>\r\n                <div className=\"decision\">\r\n                  {opponent_choice}\r\n                </div>\r\n                <label>{this.state.opponent_name}</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"choice\">\r\n              <div>\r\n                <button onClick={()=>{this.onClick4('confession')}}>🙏</button>\r\n                <label>자백</label>\r\n              </div>\r\n\r\n              <div>\r\n                <button onClick={()=>{this.onClick4('silence')}}>💬</button>\r\n                <label>침묵</label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"emoji_select\">\r\n              <button onClick={()=>{this.onClick5(0)}}>😄</button>\r\n              <button onClick={()=>{this.onClick5(1)}}>😅</button>\r\n              <button onClick={()=>{this.onClick5(2)}}>😂</button>\r\n              <button onClick={()=>{this.onClick5(3)}}>😜</button>\r\n              <button onClick={()=>{this.onClick5(4)}}>😒</button>\r\n              <button onClick={()=>{this.onClick5(5)}}>😓</button>\r\n              <button onClick={()=>{this.onClick5(6)}}>😠</button>\r\n              <button onClick={()=>{this.onClick5(7)}}>😤</button>\r\n              <button onClick={()=>{this.onClick5(8)}}>😭</button>\r\n              <button onClick={()=>{this.onClick5(9)}}>😱</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Prisoner);\r\n","C:\\psychology\\src\\components\\war_and_peace\\war_and_peace.js",["218","219","220","221","222","223","224"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport Timer from '../common/timer';\r\nimport Player from './player';\r\nimport socket from '../../socket.js';\r\nimport '../css/war_and_peace.css';\r\nconst moment = require('moment-timezone');\r\n\r\nclass War_and_peace extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      roomID : '',\r\n      chat_list : [],\r\n      step : 0,  // 0 ~ 3\r\n      round : 1, // 1 ~ 5\r\n      timer : false,\r\n      time : 10000,\r\n      user_list : [],\r\n      power_up : 0,\r\n    }\r\n  }\r\n  getData = ()=>{\r\n    fetch(`/room/id/${this.props.match.params.roomID}`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      var user_map = new Map();\r\n      for(var user of data.userList){\r\n        user_map.set(user.userID, {\r\n          active : true,\r\n          emoji : 0,\r\n          point : 0,\r\n          strength : 0,\r\n          targeted : 0,\r\n        });\r\n      }\r\n      for(var i=0;i<5-data.userNumber;i++){\r\n        user_map.set(`empty${i}`, {\r\n          active : false,\r\n        });\r\n      }\r\n      this.setState({\r\n        roomID : data.roomID,\r\n        user_list : data.userList,\r\n        room_owner : data.roomOwner,\r\n        game_name : data.gameName,\r\n        user_map : user_map,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount = ()=>{\r\n    // get room information\r\n    setTimeout(this.getData, 500);\r\n    //--------------GAME SIGNAL LISTEN-------------------------------------------//\r\n    //---------------- game step process---------------------//\r\n    // round start\r\n    socket.on('round start', (data)=>{\r\n      console.log('round start');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        var info = _user_map.get(key);\r\n        if(this.state.round===1) info.point = info.point+200;\r\n        else info.point = info.point+100;\r\n        _user_map.set(key, info);\r\n      }\r\n      this.setState({\r\n        step : 1,\r\n        user_map : _user_map,\r\n      });\r\n    });\r\n    // timer1 start\r\n    socket.on('timer1 start', (data)=>{\r\n      console.log('timer1 start');\r\n      this.setState({\r\n        step : 2,\r\n        timer : true,\r\n      });\r\n    });\r\n    // timer1 end\r\n    socket.on('timer1 end', (data)=>{\r\n      console.log('timer1 end');\r\n      socket.emit('power upgrade', {\r\n        roomID : this.state.roomID,\r\n        userID : this.props.user_info.nickname,\r\n        point : this.state.power_up,\r\n      });\r\n      this.setState({\r\n        step : 3,\r\n        timer : false,\r\n      });\r\n    });\r\n    // timer2 start\r\n    socket.on('timer2 start', (data)=>{\r\n      console.log('timer2 start');\r\n      this.setState({\r\n        step : 4,\r\n        time : 15000,\r\n        timer : true,\r\n      });\r\n    });\r\n    // timer2 end\r\n    socket.on('timer2 end', (data)=>{\r\n      console.log('timer2 end');\r\n      // result check\r\n      // state update\r\n      this.setState({\r\n        step : 5,\r\n        timer : false,\r\n      });\r\n    });\r\n    // result announce\r\n    socket.on('result announce', (data)=>{\r\n      console.log('result announce');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        // get reward\r\n        if(key===this.state.confirmed_target){\r\n          socket.emit('get reward', {\r\n            roomID : this.state.roomID,\r\n            userID : this.props.user_info.nickname,\r\n            point : Math.round(value.point*0.4/value.targeted),\r\n          });\r\n        }\r\n        // deduction\r\n        var info = value;\r\n        if(value.targeted>0) {\r\n          info.point = Math.round(value.point*0.6); // -40%\r\n          _user_map.set(key, info);\r\n        }\r\n      }\r\n      this.setState({\r\n          step : 6,\r\n          user_map : _user_map,\r\n      });\r\n    });\r\n    // round end\r\n    socket.on('round end', (data)=>{\r\n      console.log('round end');\r\n      var _user_map = this.state.user_map;\r\n      for(let [key, value] of this.state.user_map){\r\n        var info = _user_map.get(key);\r\n        info.targeted = 0;\r\n        _user_map.set(key, info);\r\n      }\r\n      this.setState({\r\n        step : 0,\r\n        round : this.state.round+1,\r\n        time : 10000,\r\n        target : '',\r\n        confirmed_target : '',\r\n        user_map : _user_map,\r\n        power_up : 0,\r\n      });\r\n      if(this.state.round!==6 && this.state.room_owner===this.props.user_info.nickname){\r\n        socket.emit('game start', {\r\n          roomID : this.state.roomID,\r\n          gameName : this.state.game_name,\r\n        });\r\n      }\r\n    });\r\n    //-------------game step process done----------------//\r\n    //-------------game behavior-------------------------//\r\n    // get new message\r\n    socket.on('new message', (data)=>{\r\n      var _chatlist = this.state.chat_list;\r\n      _chatlist.push(data);\r\n      this.setState({\r\n        chat_list : _chatlist,\r\n      });\r\n      var target = document.getElementsByClassName('chatting')[0];\r\n      this.makeScrollTop();\r\n    });\r\n    // emoji changed\r\n    socket.on('emoji change', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var _info = _user_map.get(data.userID);\r\n      _info.emoji = data.emoji;\r\n      _user_map.set(data.userID, _info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n    // target selected\r\n    socket.on('target selected', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(data.target);\r\n      info.targeted = info.targeted+1;\r\n      _user_map.set(data.target, info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n    // power upgrade\r\n    socket.on('power upgrade', (data)=>{\r\n      if(data.userID!==this.props.user_info.nickname){\r\n        var _user_map = this.state.user_map;\r\n        var info = _user_map.get(data.userID);\r\n        info.strength = info.strength+data.point;\r\n        info.point = info.point-data.point;\r\n        _user_map.set(data.userID, info);\r\n        this.setState({\r\n          user_map : _user_map,\r\n        });\r\n      }\r\n    });\r\n    // get reward\r\n    socket.on('get reward', (data)=>{\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(data.userID);\r\n      info.point = info.point+data.point;\r\n      _user_map.set(data.userID, info);\r\n      this.setState({\r\n        user_map : _user_map\r\n      });\r\n    });\r\n  }\r\n\r\n  makeScrollTop = ()=>{\r\n    var target = document.getElementsByClassName('chatting')[0];\r\n    target.scrollTop = target.scrollHeight;\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value,\r\n    });\r\n  }\r\n  onKeyDown = e=>{\r\n    if(e.key==='Enter'){\r\n      this.onClick1();\r\n      //this.makeScrollTop();\r\n    }\r\n  }\r\n  // send chat\r\n  onClick1 = e =>{\r\n    if(this.state.chatting){\r\n      socket.emit('send message', {roomID : this.state.roomID, userID : this.props.user_info.nickname, message : this.state.chatting});\r\n      document.getElementById('chat').value = null;\r\n      this.setState({chatting : null});\r\n    }\r\n  }\r\n\r\n  onClick3 = e=>{\r\n    socket.emit('exit room', {roomID : this.props.match.params.roomID, userID : this.props.user_info.nickname});\r\n    this.props.gameEnd();\r\n    this.props.history.push('/');\r\n  }\r\n  onClick4 = emoji=>{\r\n    socket.emit('emoji change', {\r\n      roomID : this.state.roomID,\r\n      userID : this.props.user_info.nickname,\r\n      emoji : emoji,\r\n    });\r\n  }\r\n  // set target\r\n  onClick5 = player=>{\r\n    var info = player[1];\r\n    var userID = player[0];\r\n    console.log(player);\r\n    if(this.state.step===4 && this.props.user_info.nickname!==userID && info.active && !this.state.confirmed_target){\r\n      this.setState({\r\n        target : userID\r\n      });\r\n    }\r\n  }\r\n  // plunder\r\n  onClick6 = ()=>{\r\n    if(this.state.target){\r\n      var my_power = this.state.user_map.get(this.props.user_info.nickname).strength;\r\n      var opponent_power = this.state.user_map.get(this.state.target).strength;\r\n      if(this.state.step===4 && (my_power > opponent_power) && !this.state.confirmed_target){\r\n        this.setState({\r\n          confirmed_target : this.state.target,\r\n        });\r\n        socket.emit('target selected', {\r\n          roomID : this.state.roomID,\r\n          userID : this.props.user_info.nickname,\r\n          target : this.state.target,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  // power upgrade\r\n  onClick7 = ()=>{\r\n    var strength = this.state.user_map.get(this.props.user_info.nickname).strength;\r\n    if(this.state.step===2 && (strength + this.state.power_up < this.state.round*100)){\r\n      var _user_map = this.state.user_map;\r\n      var info = _user_map.get(this.props.user_info.nickname);\r\n      info.strength = info.strength + 100;\r\n      info.point = info.point - 100;\r\n      _user_map.set(this.props.user_info.nickname, info);\r\n      this.setState({\r\n        power_up : this.state.power_up + 100,\r\n        user_map : _user_map,\r\n      });\r\n    }\r\n  }\r\n\r\n  // set\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n    }\r\n  }\r\n  render(){\r\n    const {chat_list} = this.state;\r\n    // chat\r\n    var chat = [];\r\n    if(chat_list){\r\n      for(var i=0;i<chat_list.length;i++){\r\n        const time = moment.tz(chat_list[i].time, \"Asia/Seoul\").format('A h:mm');\r\n        // if it is announcement\r\n        if(chat_list[i].isAlert){\r\n          chat.push(<div className=\"alert\">{chat_list[i].message}</div>);\r\n        }\r\n        // if it was written by myself\r\n        else if(chat_list[i].userID===this.props.user_info.nickname){\r\n          chat.push(\r\n            <div className=\"mychat\">\r\n              <span>{time}</span>\r\n              <span>{chat_list[i].message}</span>\r\n            </div>\r\n          );\r\n        }\r\n        // else\r\n        else {\r\n          chat.push(\r\n            <div className=\"chat\">\r\n              <span>[{chat_list[i].userID}]</span>\r\n              <span> : {chat_list[i].message}</span>\r\n              <span>{time}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // player array\r\n    var players = [];\r\n    if(this.state.user_map) players = Array.from(this.state.user_map);\r\n    else {\r\n      for(var i=0;i<5;i++){\r\n        players.push([`empty${i}`, {active : false}]);\r\n      }\r\n    }\r\n    // button\r\n    var button;\r\n    if(this.state.step===2) button = <button onClick={this.onClick7}>군사력 증강💪</button>;\r\n    else if(this.state.step===4) button = <button onClick={this.onClick6}>약탈💣</button>;\r\n    else button = <></>;\r\n\r\n    return(\r\n      <div className='war_and_peace'>\r\n        <div className=\"row1\">\r\n\r\n          <Timer gameEnd={()=>{}} time={this.state.time} start={this.state.timer} width={1200} height={20} color={\"#56AEFF\"}/>\r\n\r\n          <div className=\"round_info\">\r\n            <span>Round {this.state.round}</span>\r\n          </div>\r\n\r\n          <div className=\"contents\">\r\n            <div className=\"circle\"></div>\r\n\r\n            <div className=\"round_table\">\r\n              <div className=\"layer1\">\r\n                <Player player={players[0]} target={this.state.target} selected={this.state.target} onClick={()=>{this.onClick5(players[0])}}/>\r\n              </div>\r\n              <div className=\"layer2\">\r\n                <Player player={players[1]} target={this.state.target} onClick={()=>{this.onClick5(players[1])}}/>\r\n                {button}\r\n                <Player player={players[2]} target={this.state.target} onClick={()=>{this.onClick5(players[2])}}/>\r\n              </div>\r\n              <div className=\"layer3\">\r\n                <Player player={players[3]} target={this.state.target} onClick={()=>{this.onClick5(players[3])}}/>\r\n                <Player player={players[4]} target={this.state.target} onClick={()=>{this.onClick5(players[4])}}/>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"emoji_select\">\r\n              <button onClick={()=>{this.onClick4(0)}}>😄</button>\r\n              <button onClick={()=>{this.onClick4(1)}}>😅</button>\r\n              <button onClick={()=>{this.onClick4(2)}}>😂</button>\r\n              <button onClick={()=>{this.onClick4(3)}}>😜</button>\r\n              <button onClick={()=>{this.onClick4(4)}}>😒</button>\r\n              <button onClick={()=>{this.onClick4(5)}}>😓</button>\r\n              <button onClick={()=>{this.onClick4(6)}}>😠</button>\r\n              <button onClick={()=>{this.onClick4(7)}}>😤</button>\r\n              <button onClick={()=>{this.onClick4(8)}}>😭</button>\r\n              <button onClick={()=>{this.onClick4(9)}}>😱</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n\r\n          <div className=\"chatting\">\r\n            <button onClick={this.onClick3}>게임 포기하기</button>\r\n            {chat}\r\n          </div>\r\n\r\n          <div className=\"chatting_input\">\r\n            <input id=\"chat\" type=\"text\" name=\"chatting\" required onChange={this.onChange} onKeyDown={this.onKeyDown}/>\r\n            <button onClick={this.onClick1}>전송</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    gameEnd : ()=>{dispatch(actions.game_ended())},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(War_and_peace);\r\n","C:\\psychology\\src\\components\\war_and_peace\\player.js",["225"],"import React, {Component} from 'react';\r\nimport socket from '../../socket.js';\r\nimport '../css/player.css';\r\n\r\nclass Player extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      //\r\n    }\r\n  }\r\n  //\r\n  emoji_select = emoji=>{\r\n    switch(emoji){\r\n      case 0:\r\n        return '😄';\r\n      case 1:\r\n        return '😅';\r\n      case 2:\r\n        return '😂';\r\n      case 3:\r\n        return '😜';\r\n      case 4:\r\n        return '😒';\r\n      case 5:\r\n        return '😓';\r\n      case 6:\r\n        return '😠';\r\n      case 7:\r\n        return '😤';\r\n      case 8:\r\n        return '😭';\r\n      case 9:\r\n        return '😱';\r\n      default :\r\n        return '';\r\n    }\r\n  }\r\n  render(){\r\n    const info = this.props.player[1];\r\n    const userID = this.props.player[0];\r\n    const emoji = this.emoji_select(info.emoji);\r\n    const is_selected = this.props.target===userID;\r\n    if(info.active){\r\n      return(\r\n        <div className=\"player\">\r\n          <div className=\"targeted\">\r\n            💥{info.targeted}\r\n          </div>\r\n          <button onClick={this.props.onClick} className=\"emoji\">\r\n            {emoji}\r\n          </button>\r\n          <div className={\"userinfo\"+(is_selected ? \" selected\" : '')}>\r\n            <div className=\"username\">\r\n              {userID}\r\n            </div>\r\n            <div className=\"status\">\r\n              <span>💎 {info.point}</span>\r\n              <span>💪 {info.strength}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div className=\"player\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","C:\\psychology\\src\\components\\register.js",["226","227","228","229","230","231","232","233","234","235","236","237","238"],"import React, {Component} from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport './css/register.css';\r\n\r\nclass Register extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n  onChange = e=>{\r\n    this.setState({\r\n      [e.target.name] : e.target.value\r\n    })\r\n  }\r\n  fn_pw_check = ()=> {\r\n        var pw = this.state.password; //비밀번호\r\n        var pw2 = this.state.password_repeat; // 확인 비밀번호\r\n        var id = this.state.email; // 아이디\r\n        var pw_passed = true;\r\n        var pattern1 = /[0-9]/;\r\n        var pattern2 = /[a-zA-Z]/;\r\n        var pattern3 = /[~!@\\#$%<>^&*]/;     // 원하는 특수문자 추가 제거\r\n        var pw_msg = \"\";\r\n        if(pw.length == 0) {\r\n               alert(\"비밀번호를 입력해주세요\");\r\n               return false;\r\n         } else {\r\n                if( pw  !=  pw2) {\r\n                      alert(\"비밀번호가 일치하지 않습니다.\");\r\n                      return false;\r\n                 }\r\n         }\r\n       if(!pattern1.test(pw)||!pattern2.test(pw)||!pattern3.test(pw)||pw.length<8||pw.length>50){\r\n            alert(\"비밀번호는 영문+숫자+특수기호 8자리 이상으로 구성하여야 합니다.\");\r\n            return false;\r\n        }\r\n        if(pw.indexOf(id) > -1) {\r\n            alert(\"비밀번호는 ID를 포함할 수 없습니다.\");\r\n            return false;\r\n        }\r\n        var SamePass_0 = 0; //동일문자 카운트\r\n        var SamePass_1 = 0; //연속성(+) 카운드\r\n        var SamePass_2 = 0; //연속성(-) 카운드\r\n        for(var i=0; i < pw.length; i++) {\r\n             var chr_pass_0;\r\n             var chr_pass_1;\r\n             var chr_pass_2;\r\n            if(i >= 2) {\r\n                 chr_pass_0 = pw.charCodeAt(i-2);\r\n                 chr_pass_1 = pw.charCodeAt(i-1);\r\n                 chr_pass_2 = pw.charCodeAt(i);\r\n                  //동일문자 카운트\r\n                 if((chr_pass_0 == chr_pass_1) && (chr_pass_1 == chr_pass_2)) {\r\n                    SamePass_0++;\r\n                  }\r\n                  else {\r\n                   SamePass_0 = 0;\r\n                   }\r\n                  //연속성(+) 카운드\r\n                 if(chr_pass_0 - chr_pass_1 == 1 && chr_pass_1 - chr_pass_2 == 1) {\r\n                     SamePass_1++;\r\n                  }\r\n                  else {\r\n                   SamePass_1 = 0;\r\n                  }\r\n                  //연속성(-) 카운드\r\n                 if(chr_pass_0 - chr_pass_1 == -1 && chr_pass_1 - chr_pass_2 == -1) {\r\n                     SamePass_2++;\r\n                  }\r\n                  else {\r\n                   SamePass_2 = 0;\r\n                  }\r\n             }\r\n            if(SamePass_0 > 0) {\r\n               alert(\"비밀번호에 동일문자를 3자 이상 연속 입력할 수 없습니다.\");\r\n               pw_passed=false;\r\n             }\r\n            if(SamePass_1 > 0 || SamePass_2 > 0 ) {\r\n               alert(\"비밀번호에 영문, 숫자는 3자 이상 연속 입력할 수 없습니다.\");\r\n               pw_passed=false;\r\n             }\r\n           if(!pw_passed) {\r\n                  return false;\r\n                  break;\r\n            }\r\n        }\r\n        return true;\r\n  }\r\n  onSubmit = e =>{\r\n    e.preventDefault();\r\n    if(!this.fn_pw_check()) return false;\r\n    const post = {   //전송하려는 post obj\r\n      email:this.state.email,\r\n      password :this.state.password,\r\n      nickname : this.state.nickname,\r\n    }\r\n    fetch('/auth/register',{\r\n        method :\"POST\",\r\n        headers:{\r\n          'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(post)    // post객체를 작성한 주소로 post방식으로 보내버린다.\r\n      })\r\n      .then(res=>res.json())\r\n      .then(data=>{\r\n        console.log(data);\r\n        if(data.result===1){\r\n          alert('회원가입에 성공했습니다.');\r\n          this.props.handleSuccess(data.user);\r\n          this.props.history.push('/');\r\n        }\r\n        else {\r\n          alert('중복된 이메일입니다.');\r\n        }\r\n      });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className='register'>\r\n        <form onSubmit={this.onSubmit}>\r\n          <input type=\"email\" name=\"email\" onChange={this.onChange} required placeholder=\"Email\"/>\r\n          <input type=\"text\" name=\"nickname\" onChange={this.onChange} required placeholder=\"Nickname\"/>\r\n          <input type=\"password\" name=\"password\" onChange={this.onChange} required placeholder=\"Password\"/>\r\n          <input type=\"password\" name=\"password_repeat\" onChange={this.onChange} required placeholder=\"Type password again\"/>\r\n          <button type=\"submit\" >Sign Up</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    is_logined : state.login.is_logined,\r\n    user_info : state.login.user_info,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //return bindActionCreators(actions, dispatch);\r\n  return{\r\n    handleSuccess : (info)=>{dispatch(actions.login_success(info))},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\psychology\\src\\components\\ranking.js",["239","240"],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":2,"column":25,"nodeType":"247","messageId":"248","endLine":2,"endColumn":29},{"ruleId":"245","severity":1,"message":"249","line":26,"column":11,"nodeType":"247","messageId":"248","endLine":26,"endColumn":17},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"251","severity":1,"message":"252","line":60,"column":37,"nodeType":"253","endLine":60,"endColumn":83},{"ruleId":"251","severity":1,"message":"254","line":70,"column":11,"nodeType":"253","endLine":70,"endColumn":125},{"ruleId":"251","severity":1,"message":"254","line":71,"column":11,"nodeType":"253","endLine":71,"endColumn":133},{"ruleId":"251","severity":1,"message":"254","line":72,"column":11,"nodeType":"253","endLine":72,"endColumn":128},{"ruleId":"251","severity":1,"message":"254","line":73,"column":11,"nodeType":"253","endLine":73,"endColumn":119},{"ruleId":"251","severity":1,"message":"254","line":74,"column":11,"nodeType":"253","endLine":74,"endColumn":124},{"ruleId":"251","severity":1,"message":"254","line":75,"column":11,"nodeType":"253","endLine":75,"endColumn":126},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"255","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":21},{"ruleId":"251","severity":1,"message":"256","line":38,"column":109,"nodeType":"253","endLine":38,"endColumn":167},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"257","line":61,"column":11,"nodeType":"247","messageId":"248","endLine":61,"endColumn":17},{"ruleId":"258","severity":1,"message":"259","line":131,"column":7,"nodeType":"260","messageId":"261","endLine":132,"endColumn":15},{"ruleId":"262","severity":1,"message":"263","line":147,"column":15,"nodeType":"247","messageId":"264","endLine":147,"endColumn":16},{"ruleId":"265","severity":1,"message":"266","line":174,"column":42,"nodeType":"267","messageId":"268","endLine":174,"endColumn":44},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":17,"column":11,"nodeType":"253","endLine":17,"endColumn":38},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":61,"column":9,"nodeType":"253","endLine":61,"endColumn":36},{"ruleId":"245","severity":1,"message":"271","line":1,"column":48,"nodeType":"247","messageId":"248","endLine":1,"endColumn":57},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"272","severity":1,"message":"273","line":47,"column":14,"nodeType":"274","endLine":47,"endColumn":31},{"ruleId":"272","severity":1,"message":"275","line":48,"column":11,"nodeType":"276","endLine":48,"endColumn":34},{"ruleId":"272","severity":1,"message":"277","line":52,"column":21,"nodeType":"278","endLine":52,"endColumn":28},{"ruleId":"272","severity":1,"message":"279","line":78,"column":18,"nodeType":"278","endLine":78,"endColumn":22},{"ruleId":"272","severity":1,"message":"280","line":80,"column":19,"nodeType":"278","endLine":80,"endColumn":29},{"ruleId":"272","severity":1,"message":"281","line":82,"column":14,"nodeType":"276","endLine":85,"endColumn":14},{"ruleId":"262","severity":1,"message":"282","line":136,"column":13,"nodeType":"247","messageId":"264","endLine":136,"endColumn":18},{"ruleId":"262","severity":1,"message":"283","line":137,"column":13,"nodeType":"247","messageId":"264","endLine":137,"endColumn":18},{"ruleId":"245","severity":1,"message":"284","line":1,"column":16,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"285","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"286","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":12},{"ruleId":"262","severity":1,"message":"263","line":100,"column":15,"nodeType":"247","messageId":"264","endLine":100,"endColumn":16},{"ruleId":"262","severity":1,"message":"287","line":101,"column":13,"nodeType":"247","messageId":"264","endLine":101,"endColumn":18},{"ruleId":"245","severity":1,"message":"257","line":149,"column":11,"nodeType":"247","messageId":"248","endLine":149,"endColumn":17},{"ruleId":"288","severity":1,"message":"289","line":176,"column":9,"nodeType":"290","messageId":"291","endLine":176,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":180,"column":9,"nodeType":"290","messageId":"291","endLine":180,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":184,"column":9,"nodeType":"290","messageId":"291","endLine":184,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":188,"column":9,"nodeType":"290","messageId":"291","endLine":188,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":192,"column":9,"nodeType":"290","messageId":"291","endLine":192,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":196,"column":9,"nodeType":"290","messageId":"291","endLine":196,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":199,"column":9,"nodeType":"290","messageId":"291","endLine":199,"endColumn":15},{"ruleId":"262","severity":1,"message":"263","line":272,"column":13,"nodeType":"247","messageId":"264","endLine":272,"endColumn":14},{"ruleId":"262","severity":1,"message":"263","line":277,"column":13,"nodeType":"247","messageId":"264","endLine":277,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":302,"column":15,"nodeType":"253","endLine":302,"endColumn":32},{"ruleId":"245","severity":1,"message":"292","line":81,"column":9,"nodeType":"247","messageId":"248","endLine":81,"endColumn":14},{"ruleId":"245","severity":1,"message":"293","line":117,"column":5,"nodeType":"247","messageId":"248","endLine":117,"endColumn":8},{"ruleId":"241","replacedBy":"294"},{"ruleId":"243","replacedBy":"295"},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"257","line":29,"column":12,"nodeType":"247","messageId":"248","endLine":29,"endColumn":18},{"ruleId":"251","severity":1,"message":"296","line":131,"column":15,"nodeType":"253","endLine":131,"endColumn":30},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"257","line":127,"column":11,"nodeType":"247","messageId":"248","endLine":127,"endColumn":17},{"ruleId":"297","severity":1,"message":"298","line":195,"column":5,"nodeType":"299","messageId":"300","endLine":216,"endColumn":6},{"ruleId":"297","severity":1,"message":"298","line":251,"column":5,"nodeType":"299","messageId":"300","endLine":261,"endColumn":6},{"ruleId":"297","severity":1,"message":"298","line":262,"column":5,"nodeType":"299","messageId":"300","endLine":272,"endColumn":6},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"301","line":62,"column":21,"nodeType":"247","messageId":"248","endLine":62,"endColumn":26},{"ruleId":"245","severity":1,"message":"301","line":142,"column":21,"nodeType":"247","messageId":"248","endLine":142,"endColumn":26},{"ruleId":"245","severity":1,"message":"257","line":172,"column":11,"nodeType":"247","messageId":"248","endLine":172,"endColumn":17},{"ruleId":"297","severity":1,"message":"298","line":302,"column":5,"nodeType":"299","messageId":"300","endLine":323,"endColumn":6},{"ruleId":"262","severity":1,"message":"263","line":361,"column":15,"nodeType":"247","messageId":"264","endLine":361,"endColumn":16},{"ruleId":"245","severity":1,"message":"302","line":2,"column":8,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":25,"column":29,"nodeType":"278","messageId":"305","endLine":25,"endColumn":30,"suggestions":"306"},{"ruleId":"245","severity":1,"message":"307","line":26,"column":13,"nodeType":"247","messageId":"248","endLine":26,"endColumn":19},{"ruleId":"265","severity":1,"message":"266","line":27,"column":22,"nodeType":"267","messageId":"268","endLine":27,"endColumn":24},{"ruleId":"265","severity":1,"message":"308","line":31,"column":25,"nodeType":"267","messageId":"268","endLine":31,"endColumn":27},{"ruleId":"265","severity":1,"message":"266","line":56,"column":33,"nodeType":"267","messageId":"268","endLine":56,"endColumn":35},{"ruleId":"265","severity":1,"message":"266","line":56,"column":63,"nodeType":"267","messageId":"268","endLine":56,"endColumn":65},{"ruleId":"265","severity":1,"message":"266","line":63,"column":45,"nodeType":"267","messageId":"268","endLine":63,"endColumn":47},{"ruleId":"265","severity":1,"message":"266","line":63,"column":77,"nodeType":"267","messageId":"268","endLine":63,"endColumn":79},{"ruleId":"265","severity":1,"message":"266","line":70,"column":45,"nodeType":"267","messageId":"268","endLine":70,"endColumn":47},{"ruleId":"265","severity":1,"message":"266","line":70,"column":78,"nodeType":"267","messageId":"268","endLine":70,"endColumn":80},{"ruleId":"288","severity":1,"message":"289","line":87,"column":19,"nodeType":"290","messageId":"291","endLine":87,"endColumn":25},{"ruleId":"245","severity":1,"message":"250","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":2,"column":17,"nodeType":"247","messageId":"248","endLine":2,"endColumn":21},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'mobile' is assigned a value but never used.","'Route' is defined but never used.","react/jsx-pascal-case","Imported JSX component Generate_room must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Game_container must be in PascalCase or SCREAMING_SNAKE_CASE","'Generate_room' is defined but never used.","Imported JSX component Public_room must be in PascalCase or SCREAMING_SNAKE_CASE","'target' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Component' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'backgroundMsg' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'showDots' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'gameState' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'timer1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'end_x' is already defined.","'end_y' is already defined.","'createRef' is defined but never used.","'useEffect' is defined but never used.","'src2' is defined but never used.","'_gold' is already defined.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'light' is assigned a value but never used.","'car' is assigned a value but never used.",["309"],["310"],"Imported JSX component No_more_hero must be in PascalCase or SCREAMING_SNAKE_CASE","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'value' is assigned a value but never used.","'socket' is defined but never used.","no-useless-escape","Unnecessary escape character: \\#.","unnecessaryEscape",["311","312"],"'pw_msg' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"messageId":"313","fix":"314","desc":"315"},{"messageId":"316","fix":"317","desc":"318"},"removeEscape",{"range":"319","text":"320"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"321","text":"322"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[701,702],"",[701,701],"\\"]